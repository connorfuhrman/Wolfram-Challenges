(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 11.3' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[    114633,       2362]
NotebookOptionsPosition[     95146,       1993]
NotebookOutlinePosition[    110941,       2299]
CellTagsIndexPosition[    110869,       2294]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell["Antipode above or below Sea Level", "Title"],

Cell[BoxData[
 FrameBox[
  TagBox[GridBox[{
     {
      StyleBox["\<\"THE CHALLENGE\"\>",
       StripOnInput->False,
       FontFamily->"Source Sans Pro",
       FontSize->18,
       FontWeight->Plain,
       FontColor->GrayLevel[1]]}
    },
    AutoDelete->False,
    GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
    GridBoxSpacings->{"Columns" -> {{0}}, "Rows" -> {{0}}}],
   "Grid"],
  Background->RGBColor[0.9961, 0.3098, 0.21569],
  FrameMargins->{{13, 13}, {2, 8}},
  FrameStyle->None,
  ImageMargins->{{0, 0}, {-2, 0}},
  StripOnInput->False]], "WCIntroDivider",
 CellMargins->{{66, 0}, {-2, 37}}],

Cell["", "WCIntroDividerLine"],

Cell["\<\
Find whether the antipode of a point on Earth is above sea level.\
\>", "Description"],

Cell[CellGroupData[{

Cell["What Your Function Should Do", "Section"],

Cell[TextData[{
 "Write a function ",
 StyleBox["AntipodeAboveSeaLevelQ", "InlineCode"],
 " that takes a point on Earth and returns ",
 StyleBox["True", "InlineCode"],
 " if its antipode is above sea level and ",
 StyleBox["False", "InlineCode"],
 " otherwise. The function should allow for any valid geo entity as input."
}], "Text"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  StyleBox["AntipodeAboveSeaLevelQ",
   StripOnInput->True,
   FontColor->GrayLevel[0]], "[", 
  RowBox[{"GeoPosition", "[", 
   RowBox[{"{", 
    RowBox[{"40.11", ",", 
     RowBox[{"-", "88.24"}]}], "}"}], "]"}], "]"}]], "Input",
 Editable->False,
 Evaluatable->False,
 CellLabelAutoDelete->False,
 FontSize->14,
 CellLabel->"In[1]:="],

Cell[BoxData["False"], "Output",
 CellLabelAutoDelete->False,
 FontSize->14,
 CellLabel->"Out[1]="]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  StyleBox["AntipodeAboveSeaLevelQ",
   StripOnInput->True,
   FontColor->GrayLevel[0]], "[", 
  TemplateBox[{"\"Paris\"",RowBox[{"Entity", "[", 
      RowBox[{"\"City\"", ",", 
        RowBox[{"{", 
          RowBox[{"\"Paris\"", ",", "\"IleDeFrance\"", ",", "\"France\""}], 
          "}"}]}], "]"}],
    "\"Entity[\\\"City\\\", {\\\"Paris\\\", \\\"IleDeFrance\\\", \\\"France\\\
\"}]\"","\"city\""},
   "Entity"], "]"}]], "Input",
 Editable->False,
 Evaluatable->False,
 CellLabelAutoDelete->False,
 FontSize->14,
 CellLabel->"In[2]:=",ExpressionUUID->"1903ec9c-d9ef-4180-8268-19e7b6780848"],

Cell[BoxData["False"], "Output",
 CellLabelAutoDelete->False,
 FontSize->14,
 CellLabel->"Out[2]="]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  StyleBox["AntipodeAboveSeaLevelQ",
   StripOnInput->True,
   FontColor->GrayLevel[0]], "[", 
  RowBox[{"GeoPosition", "[", 
   RowBox[{"{", 
    RowBox[{"40", ",", "115"}], "}"}], "]"}], "]"}]], "Input",
 Editable->False,
 Evaluatable->False,
 CellLabelAutoDelete->False,
 FontSize->14,
 CellLabel->"In[3]:=",ExpressionUUID->"7cb7a4ce-067c-4aa5-8644-2f9cd22ed084"],

Cell[BoxData["True"], "Output",
 CellLabelAutoDelete->False,
 FontSize->14,
 CellLabel->"Out[3]="]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["More Examples", "Subsection"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  StyleBox["AntipodeAboveSeaLevelQ",
   StripOnInput->True,
   FontColor->GrayLevel[0]], "[", 
  TemplateBox[{"\"Beijing\"",RowBox[{"Entity", "[", 
      RowBox[{"\"City\"", ",", 
        RowBox[{"{", 
          RowBox[{"\"Beijing\"", ",", "\"Beijing\"", ",", "\"China\""}], 
          "}"}]}], "]"}],
    "\"Entity[\\\"City\\\", {\\\"Beijing\\\", \\\"Beijing\\\", \
\\\"China\\\"}]\"","\"city\""},
   "Entity"], "]"}]], "Input",
 Editable->False,
 Evaluatable->False,
 CellLabelAutoDelete->False,
 FontSize->14,
 CellLabel->"In[4]:="],

Cell[BoxData["True"], "Output",
 CellLabelAutoDelete->False,
 FontSize->14,
 CellLabel->"Out[4]="]
}, Open  ]],

Cell["Here is Beijing with its antipode:", "Text"],

Cell[BoxData[
 GraphicsBox[{{
    TagBox[
     {Texture[
       FormBox[
        GraphicsBox[
         TagBox[
          RasterBox[CompressedData["
1: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
f2kPZ3z7jZ3kicc2JLfecqPTa3UM2fvlbc8MzLv3D+91362+YlWyZs2VybOb
H0uVz+lz7Y3XdsFvYnn90Lu7+9oIXAvtkHk++bST3HX/A8lVa3+QPL3vmHs2
fF5+9fXJ9x/8aaqv+E/29OrzShesu14Z82PYXJXzDPm9vH5oodZ9FfkjK5e4
ckkgP8a+9/5cvesJ+4HvLYZ3PEAnh5NXrlyRnHrqV1J8nDrJOeeclVyztK5I
J2Dd6P3da5fH/8XnmU4gs457vWHelHlezKk25f8cFnA+3Kr8sc6fL/BJ9/Xj
mtHzXH3i5Rw3yCNxjrp60EnWfPtbbr786P67u/PulFNODv72beHrk046ycnW
t99xq+N/frf2xu8OzE/6pI8bb/hOcv11a5JLLr7ItcVup7b0x/eA75j7/B8Z
oNef7+u8885x9gH0Q/if9sgEafxPm7AmLTw9jvgr+qRmsO0DVANymfhaNR7k
g1QU+5cF3jHvRHIE+/qKu5HsxzxizZI9L+vaml7nZxMdx+PM491vbnfzd9tL
Tw+sGzd/73r3Hbr/oxvvd2vEoO0wj//LnGe6gM6PvX0Sc7NMTlLmFXLCtK57
rAFwPDZmZCo4lvuRz1fT1xfC153zeWyQVeS3WZ9vYI//4Xb0+3T+7yRXXXmF
k6c/6Rzqzkn22Pjtvj07Bvo8//zzgrnbcf1fd+23+/oM5Q3p/f3zfbAvbAKc
ExkEmSCuyaeav3BMXbncsoCsrBxvVX3Y5wmq3yBZm7HMvFP+UOkcisEcZp7A
86pdrJzOXhY44vYc5P+c1Ye+t/i9+vHxsffcnN348H1uDp911pnJFf9yeRLz
MjbIDQ+sc/xNe3DXnbcmZfm/7HmmAbL146NH7GmZ+LxRUSZuJi0+V744Ta8z
eesPawS8z5qAjhjr9ePM8TLqtbP3Lb9mxkR9NkrPrxetvCA57bRTnV0/i//h
737d/Giy+MHbffMt7BM7wY5XnnPge9oh06fJ7P38P3h9fM9enhDu7cEh4Xsr
s381Dqh+wSzYxeqC5hx8HNoVVc9ZekT4vniGVf0AFI/LvMBWRnzgs/u9LYj5
ondCO+R8ZBDlWHI5pH9Rbu0zDLfGMO+Zs1+7aKXj7dNPP8397fUN3w7uR2c/
euRt9xs+r1m2MXY+fKevv3T+L3eeaYFsYqpZ6uPOFgZ89uvUW7PiXZgnzCvV
r077rXxu2qJDKzaxVxNwOvdrWSOdrXl5fxSbM7oOPoqj7wV4foX3t2/d7OYK
+/Qx/3MevrvzB7f0zbnffXI4xc+m36bAJ/09/uMNSbocXsz/9LPq8ku7iM8Z
+2NO0mdLNfHEJ9hqVPe96bHTNNiHSdtPFL9LBo/zNDHei/yLJa8jW/D7OK9W
KFPwf97RPMTStA8dp8/D2T+8+zYH1pF4Dv/7748kJy7Nczjf+xR1nO5Pu34/
/mz+L3OeaYN8zhnn2sdUnj7F8tUVP42dLO0apinmWbzvapTu/nAqOT8GeQWV
f062bXHOqHNT/C8bP3YA+DbW/zkO94bzCLt/vK8f2+w3PfFQ5F8weA1F/B/v
JcRzmvGPfKp81eick5qfWf4yzNmmx03TgN9DX39h67IPM3tbWbkutE8Qy1Ho
H8xtxWgap7cbe3a94ubrlmceT8I5DH+zn9h7f52unZDj8uG/aW2/zTGL/8uf
ZzaALMA8UHx6HfMVrgyfE/wC9yPH19E/exhlcg7kXZ9seJtcfYKevUH7vk2v
eeMC9xvmp+Od7HzX73kOb+/u53/s+dLZY/7nb47j2+9q6i21xa+P9uy7xX2G
nC1fwV1vbE/SOL48//tjMf8zF0K/Lj6b3seta05OMxijYY1Q/o8+o5whjy/7
AOQ9xzjeiedqtvppQcf58OGDd/zThb7jv/7VHnccG2J4/MD+nU5nYJ3Z9ca2
JG1NeH3nS26vIFwTqp1n+sG8kZ0Te0Bdczb0ARxH7nHFZenvOF77vug79gnZ
/8bOEebfbnptawLxfbN+FtW4K5qfIf+HPn2xvs7+HL788suRXX/nay8ksXwe
czY+g8jg2OfS4n5G5X+gXK7Ihk3VXFUdAeXtn8XcWFVATk3GJ2sK/w/H7/Nv
+5wPix93ks+Of9QdfwLP0u834idwLNm871iwP5mWUyIr50SVHBVl2lRpN/t5
6MYDe25FYI3BbwWfF3SdujhRa+eka45qP0M23DS+M/RD+cm1F1C9HprX+eX3
zzF+f/DA68mxowdT5qDPAYBPH7q8zxkw2IY+e7E7vWP0yz5f3J62fF+2r+zr
a6amEs8dW7Xq16kWpI3fbDyz/6Pk7PNXJhdcuMIBH9QLl4CtiBgP7AQ8w93v
d5w/V+g7un/fz1x8N7piOFYuveQid1zA9kuOinic/PmPPkfFhRee72RPPtE5
08YfNi71R//YowfzyvW3EwZj1w2G0cH6It8Z2Tk311BLDf36qT2LtfRlGD+Q
kxRHzThA1zI/p3qgfTX2oQV8DJQXXnma+Zt5w/tgTqL/8x2ymfF/OnguPEvs
OOdffFmy5tZ7ulh776PJk3uPdcf3Z8c/HvA9xf7r95O2Be+s4/zH4Gj2kbFj
KYcce8NhO+1lkbuC/WLFna+/786kn6+9rUl94o+mc+S1E/r9YgyGesBar7kk
fYc45FG5xHKaTSeQ18I8Jz87dHTsse+zjOOf9eruKq4FPoezeK5hvvkQsk8z
J10c2z7vu2ny9CDQ/+FMcjnyf+0H8IzZ6+P5+TjXTiX+J2ec7MfYiWj31KaN
3d/Kz5xcU6GNHr2etvF+tMs1EfQpWeHPKfwftjP7v2FcCOtXyL+Gz2FjjtiT
lw5jmE4oBwNjg/EARyETNj1WRwHrv/IfK7/rOM+nGs/KHyPZWnvRmitx/ivF
ocV7D8rT4GvMNz9G2gTx/1dOOz25+LJVzg7A5zNP/zhJ062H0f8vv+wSdyyM
/2bvgN9SWyZ8V/iIcdz7lfWfGzs+NgTaEFNOrsq0a8RnnT0HYfBeDIbRoZoV
+NLzt+Jph1ljtOfe9HpgqAeMBXGmapk0PV6HAXLM5shnTLl8674n+e3xzEIO
xw7AngpyVF5uWtVvzuqf/YA258dqAuL/lReu6MZrA3xLyvJ/zNUnLuenZu9d
OeD7fUeORnlhe+/ole3PuuP0HZ87BNzv810OXiPnC++FXPTG/4Y6wToT8vwo
vv9m659NsD+E7jlabEAzgIOJ+eA+lMchHqdl8lRXAc8ri7+xOXC+OGYl/JuY
A/gduwCfXDN2BPwDsBsgPxDnPsvxqVUR2v9/ftjHAaTby318CHZ3ff/qy1vc
b9Hlw3ah/Z+9/MHcFEddLrnBvLIdV2eO4z7/XK9Pjt1y8w3J73/z68DfdfAa
s+3//eNJsmbT88wwfWCNSst1OkzO0XmOo5t1sHfdP3aqxEKV+U3ZWKdq8VPy
qYM74Uz5NbInzP4wPIHtCztAug2g2p6rcs8XrcdcA/FrxLPjDyD529eyH3z+
fE9b+QByvdo/MHh09f/Lv5mse3K7w8s7tqfkiOi4HO7IAPA+e/rY1vntbz46
1Ncu5H/eLT75HFt4f39fu2u/e3U3lwX2AfwDaEesaZpe3+P19PHx5+V237ry
W25PIsQf/vBxXy0CxsGo/M8cYIxh/1WfTXOTYbxIq43BGsPa5PcXy60v4n3b
j5xdoIP29so7Lqcvufvf/sXOlLHl82bzPeuh+BO/aI4N5s7sJI89+kBq7d5P
f/t+X7sydYD5P3u16fkBffwfvyP3ILFhT7/wotMVWU+Rc1gLWV8Pdz5Knn12
U8599qNqnCCyN+fkfMTIwOno9MgmTb/vaYT4Pw3xOICjw5owcPWgb33s/+d/
x7E4VxzjVHUnBWpT9Y9f32cR/yNnvPnr7HvZ8otj3XtmzR0ldxF7YsR8x88S
HuA6rHbxbIK1PC0HH/JfrJNkQXlRm573hvED+7PGDrm0lUuT/D1pHEv+H74n
x6/4n3hsF5/Vl3vHtydPsOr7hoj5v0wdYD7hdr6Lr43cXfyeOl7fvP77yZnn
/LP7PXvEyL3wsHzzsQ/gS5Z9n359DPPRFc055fKB97FNSKZSbKDqzDf9vqcR
xPixdimvpXBwIT2nBDo2tnl8+fx7GGxzvPtu/Xcf/uaYk4XZB+v89uPovXfc
eKU/P27T7VJxnzH8vk/vXrYd8PkJ+d3vf7eY7PnA26yoSaQYnapAv/d5zT0H
qC45eh/fcQ34n4KmucpQL1jn0uz7Pl4vn9PlE87YNH1/fhDaA8nPByeK4339
3nCMef7Hr4nv0ZloI1+nLP6Pc/Kn7R+UrQOczv/eTkvewLcOHXY+duwJcK3K
1SI/WPJDYhfIuk/liS/ifdWi9zF+vbpy2rP19bjSbf6G6lifAmwqw6yTafYc
5TDjfeGjUac/jM832c/JAmsyMgBrbygfIkdWtf3HvieAerBhXQXu3XwKZg+x
r18M+XfH9X8Y79L3TT+ZP/Ti/jyHwuPoOfAitvuYZ+FM1ezFZk8tQNX7zdP/
Q1/n3t5Br125OsDZ/M850OXZ9/e1KY4lkiNY76T7vPru4H3edf8DLp6cNbrM
/ihzzefs7T1H/n98OWd9XGNQsPlVDvh0yq8z65lxvGqMJ+NAciDvKPQN/fSz
xb6cJtovrWttHvZZsC4fr7D/lOY7klWr1TAbiH390hD6LCt+iTXs8eXaOE3P
ecPkwZiRLiQ9nv11OJN4aPZRs/gfvofbb/v+Te4YOfmz+B/5gDbC4B5p2TrA
2fwv32vs/Nyb13E6A/Nkz7u/6t4nueTpi70CfAKQhYo4Bb0wa65ZbOxoYB3S
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
4n6aen/IjTyjcZxftXWx9aOPo3PD3fB0nwy8JM/it5cWHwhfEzMQxv4BOP35
tzuuLdwe+vEhE+BfoDqD6Pny81fNIOIH+b7pMTwNCONhxa/gT3845mz6L297
Jrnqyiscv27furmvHTb60047dYD/8R2A20P+T7PZX37ZJQ7D8j97DPIPDGUO
y/NTDNaGpjk+D9glyt4L/tuKaTWbz3QhzKmjY+juRbkptx3Izw0U2rXaMCaK
8iQO22eVtnXLAaq1k5f7R3b/uI32yNLy/qhdWr4fHVc8TVzjp6hmkKEfgzHg
sV7fcX4A8O2jG+/v43T5/vm9ft92z+5X3LEf3X93H3e/8PyT7vi+PTu6beF3
ZIth+T9r/9/4vxiDcl+7gC5fxn6H3Tz0Y8GfselnaygG6zX1BuBpuB6bnfix
qDaVckTlxQ+Gti1sScTpNWUPjmsYGQxtAvJx6F8nrkaH/+HdtzlZgL99HGBv
Hv77748kF1y4wu0P4AN4y803uP+j/2M7CNvC1XyHveDOH9zi+Jo+n37q0dr5
3+L9ilFkX20a2HeL9BXWf7gilF9H3e8tY3MvarM+BVntyh6fpT0A7oXcvrH/
MWOSvX7t9+eNjaK8wGm5rYetbzwqsG2gk3iftvE+16bfbdG1lbnGNt/HrAJf
196c6Thb/5o1VzoZYO2N33V6fVpsPX6BxAvAvwC9P+Z+9Yn8QF/0id7/7ObH
UvsUx991562p/P/6zpe6MQc6hm1CNodp9vmZxNiHN9uW9y8GdV2zrh95FRkv
vgfe+7D6v3L64aeHTx9+e/jfxX4BYRv2NuXvrzZhTaAQm4M9zDbW/5kkuKeq
9XpioK/sOZzNp2l5LZAvmrpnv8dRT96DttsRlMe56eswVAf7AV4O6ETIm4/j
aJv3fdrve39bzH8+2rz3z7qe9/7ybMNlbAZpcHHGS3xL/B3xeMT0EauHX3LI
27Qhvl9tyDvy9e890sfV+OurJpBAXoDQD6vN9X/GPe4A77Cu2pP0s/VgL98f
50GXSWvbRG2pENg8hsl5KBsSMZDMjXHs5Y8Dsxb3OE9ANymyw7UVW0rUDJtn
kK+06XcUA31QNVazrhubQF4fw+Z4hmOJMYLX4V/4nJw85CWFe/keEIdPjT/Z
BhTTL67GJ4lcv2FNIEHcPS31f+qG6k2rtmDd4wdu37Q8dvLqWqbFlU4SG4b4
DTYD5EfVGpoW/td7b/oaDMO/u2mTAeCRsP6UYRBtq/uHD1gZPQF+z+uHejPD
PQ+fy5/4JcXe+/w9b3bz96gNOX3UBpkAecGvzYvdnH3U/IH/Q4i7Z6X+T1Ww
lkxq/ud93+QegN5x1d/gv4htSzmPivi/qr+JwZAF5M2m+aEKzPe/HPJ0pEkC
W3DZnOvwbFY/o8R5o8djs4drdSzmf9qQV2RzlMtcOYP4m3bkAkS3x04gKH/f
PNX/CQHvtEWPYJxMIi9cHtdW1YlDvh+Fw6elTrHJKe3CNNULNv4vB9aCpt/r
MO8qq17RKHZd1fIJ+V+6OHA+f0t8HbaRDx/2fo7xN5/k83f73PuO9dn/5WPQ
5vo/4wD33bZ6o8gi22usOVwV2POrclxYm6DoeY/7fTY9pgyjQ7lUs/YU9R0o
isdtC9LyvxXd5zyjyJ7eNu7Pq1dILHmVvrSfyv+lt7s8o8t8ff9Lb3dr+TJ2
lKufGiTIA7TBzn/GFT/oxgnwm7AmULj3P0/1f3iuvN8Di6P7+Y8T2NWL4giH
gY8TOVJYn6Dp92SYT8gH6YHn3+jLxyi4GgxLx/kefPKp96sn3l/59mIfHtXk
jRHHAsbtiAmk39iXnzzB/jzHUuaurzlM3iFiAVWbII4ZK7rPeUeTNoAq+f2E
LHmFsVhGLwnruYT1Y7AHw73yycMmj91+3Za3urZ58Te2eGr0YKeHm33dV78P
QC5T1QQKgawBx89q/R+eJfo0fN/WehJ543AcOi02IGxSvLcy8kBd83kc5zCd
f7ZAfsTv3nG/y6Fz/sWXDdRJhif1vcv7c+RwEufd7+Xe8Xys/P4xyCUUtkvL
3U9eIN+ul1tQNQh//5tfD3A/ffAb/Z56Qy/v2D5Q77HoPg3N1f+rul8Pd2fp
knm1AuI+svZe4V/4GF9+9HjV7O0bT0u8DJdjA9iw9ZeuvXgZGQJZUzWBBOL7
uvH7U1T/p6yPGc+zzXUkyiAvbqSMvT2rDfs4sjH4ulHTz6WWv2e6wbuhnsLp
Z52b/OM/ney4UfUT1Cbk/5CbyQck3s3if3R21ewF/fplj//V7v3De11+QWr9
luF/av5x/Lbv3+TsBuQmPu+8c5JTz/hqX52IMvdpaLYGYN4ebLyG5OUrzssV
VPVZaK8oz4datUbSvlNNoBDrg+/aXv9HdgnF6scykPIREcu++/3O8vz29UK8
TXAwXxfzdOH9/Sl2Pv32aAZ6tr8/R+3+XJhDpBP0kZ5jrJvf/CPP0aE8qj0f
+XLE76DoOYXtGLvj2GcwGKqCcb3uye2OD7//4E+TfzjxxOSb13+/T3cO+R+9
+fbbbnLzCD1btYCy+J/8/nCyENv1+3P3+vlHPsBy/N9Jbr/jVnf8/Q99HVAn
X79+0NV9imtPFd2nwaMpP4AqeZqzchaRA3Ba/JqnAa7m+tOvunlz5jn/PMB9
fH/XY//qvt+z65XuvKQWOOtDON9ZM5DTQ1sfub/T6oWl2Q7/9blN3Xbs88Xf
s2a89MJTqfzOOkSbFSvi+qS9709c0mVee/X57rHQDoAN5raHnnZ9rH/mZwN6
Q9FzSsM86sXzeM9tBhx5+dXXJ6d85VS3pl6yek3yTyef0pefLOT/7911n5uf
0rsfe/SBSvb/mL/F/8xd8vuzZpS1/392/COXY/grp53udHuNL6431sfK3KfB
oyn+r5qvJ83+j29q089vlsCeA/NG8xeOi+uvleX/na+94No9tWljcvjQWy6f
N39zPFwT9r716nJO7++67199eYv7u/PhOwP8T55v/k+blStXOA4/PjAuOn31
y33Nsf5xw7XrXOFYkg2giP+LntO4YWuYPZ+qkD8cfHv2+SuTG+5+yPGidGT5
x4X8/8SLXo4m3z52duoC5PH/rje2O58+od9/r8f/tKfP9BpA/fyPHQ+ugNO5
Xq5f9Z2Zp+j+yAPS7cvep8ED3/km+L+q3T7N97/JOK5Zg+YNnHrljXck/3TK
l5OvX3ltn89CFf5/Zfuznj/vuzM5euRtx9P85jcfHUoZDx1Xv4P2g3ze4/9d
b2xLZDdc98Pb3bG4P/YZuId777nDXdNNa69NYhtAGv8DYgOx5efxf5nnZDC0
DfDe2nsfdWOa/fLTzjzbAZ4M/eNC/v/ZoaPdPX9seUX8H9r103L0x/Z/7Sf0
6gL38//Rf/t112eL64LLOY5tn+uF91de/s2uTWB9hfs0ePDMJhUHgA6P3Z8c
hFWvE3lBcSdcr88b2PzzmxXAezfd+2M3bx7eujdZfe0tyT/8w4nOR1H2tWr2
/6PJ1Vet7urI6A+sE1n78WX4//LLLkmuWXNl8s3Vvn7ojTd8Z2CNeeZpfw/4
FrHfAE/HfkRZ/A+QM/FvyOL/Ms/JYGgb4Ef0Yfar0J/5m8+r1v7AjWXi5Hws
U4//9y90urV6sdEX8T8+gsxJgfYhr8e1e/lk3cAHMKxBLP5nb1+2HMndXD9c
jv0NPnfnvfWeLq+Xvc+m30ebkBVXXyfw1RjVLgffo/Mb79ePzcvz5iunn5nc
89TLyfV3PejmC5+Kg3Tz5skX3fFXfpbP/5L/8fV95OH1ydcuWtndD0jzAyzD
/9QFF/ej/6f1c8nFF7m9RThe6xLrTtg2j/8BsXtZ/F/mORkMbQLjFzs5nIkN
XLZyx/cvv+2O3/HIFncc/r9zScbn2OHOR8nL255xtnpi7vED6K+96+cce3oc
j8FvQ/5Pq91LHD/H2DvQmqFjm6K4WcVZwfdwP0DXh+OV66fsfTb9TtqESeQD
Hibm3zAZMD8eeP7NVB+eM84+r+vfFvq9Pfv8M935eu13rx7w4WWvHn1dcQH4
7KOLp9njq9r/sQHw9+43t/f19e7B9HuI/QD7+X/QVokvQBr/l31OTb9Pw+Qw
DTYfl4NiifOEcIzC9zqu2Cb93fntsWh+ZMXdZLXJa5d/DH+/tL16XR/6PqDN
+iHus+l30iZMwgfA+L+9YO8aO7bzsXv1l91cBNfd+UCffxvzSXvf+AXju7Px
4fvc39dft6aP/7X/D1fjy69YgFH0f/E/e/6nnvoVdw299p2uj+G/Lf7S+QGA
x3/ci02K+R9ZBDlF4Hfi/9s3bh7g/7LPqen3OQ0wOandIF/FOGp1loVqXjX9
HOYBk6jRMmx9XsP43z1663krL02+cc3abr0CV9Pw54eTr567Ivn2LT/s+rdh
44bnsOfD+9j94f5Bvz6/38e+v+QFOD4rpydyAXp6mi8K3M132B9D+YJj8h+m
32+s+rqTM0L5gusiVmDDA+u6xw/s3+l+G6PX/9Hk/qdeTM4455+dvi/Zp8pz
MhimGdRTbYr7wf4jxheTBLLWuGQA1vRpymE/T1BtItUsCvVXV/to+Xj4/vj/
y+/m2fl6vJ5vD8xqW+a7YWyOndK/3fNBr47D+iGf07jfW9NjxzC7IJ93U9xv
dfyaAWtX3TYfxVQ1fW+G+jHtuX/zQN6QOp+V8bVhmpCXc3WcgC9srjSHOtd0
ZAnziZ5dtK22b53j1tYgwzxj0nv/nI89h+f2m67YJMhVXtc7NTvObIO52jRX
jwNla0oZDLOKSdfuxj/MuL8dwPdi1PdJTKHpULMPfOXrXAfQA/AXmUROiixU
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
x56Pfg==
           "], {{0, 256}, {512, 0}}, {0, 255}, ColorFunction -> 
           RGBColor], 
          BoxForm`ImageTag[
          "Byte", ColorSpace -> "RGB", Interleaving -> False, MetaInformation -> 
           Association[
            "Exif" -> {
              "Software" -> 
               "Created with the Wolfram Language : www.wolfram.com"}, 
             "GeoMetaInformation" -> {
              "Software" -> 
               "Created with the Wolfram Language : www.wolfram.com", 
               "TileSources" -> 
               "Wolfram Knowledgebase with data from OpenStreetMap"}]], 
          Selectable -> False], DefaultBaseStyle -> "ImageGraphics", 
         ImageSizeRaw -> {512, 256}, PlotRange -> {{0, 512}, {0, 256}}], 
        TraditionalForm]], 
      PolygonBox[{{-180., -90.}, {180., -90.}, {180., 90.}, {-180., 90.}},
       VertexTextureCoordinates->{{0., 0.}, {1., 0.}, {1., 1.}, {0., 1.}}]},
     Annotation[#, "GeoBackground", "WolframGeoGraphics"]& ], 
    TagBox[
     TagBox[
      TooltipBox[
       {Opacity[0], 
        PolygonBox[{{108., -54.}, {180., -54.}, {180., -90.}, {108., -90.}, {
         108., -54.}}]},
       "\"Wolfram Knowledgebase with data from OpenStreetMap\"",
       TooltipStyle->"TextStyling"],
      Annotation[#, "Wolfram Knowledgebase with data from OpenStreetMap", 
       "Tooltip"]& ],
     Annotation[#, "Metadata", "WolframGeoGraphics"]& ], {
     {RGBColor[1, 0, 0], PointSize[Large], PointBox[{116.4, 39.93}], 
      PointBox[{-63.599999999999994`, -39.93}]}, 
     TagBox[{},
      Annotation[#, "GeoGridLines", "WolframGeoGraphics"]& ]}}, 
   TagBox[{},
    Annotation[#, "GeoScaleBar", "WolframGeoGraphics"]& ]},
  CoordinatesToolOptions:>{
   "DisplayFunction" -> (
     GeoGraphics`GeoGridPositionDisplay[#, "Equirectangular", "ITRF00"]& ), 
    "CopiedValueFunction" -> (
     GeoGraphics`GeoGridPositionCopiedValue[#, "Equirectangular", 
      "ITRF00"]& )},
  DefaultBaseStyle->"GeoGraphics",
  Method->{"OriginalInput" -> HoldForm[
      GeoGraphics[{{
         PointSize[Large], 
         RGBColor[1, 0, 0], 
         Point[
          Entity["City", {"Beijing", "Beijing", "China"}]], 
         Point[
          GeoPosition[{-39.93, -63.599999999999994`}]]}}, GeoRange -> 
       "World"]], "BasicGeoRange" -> {{-90., 90.}, {-180., 180.}}, 
    "GeoGraphicsOptions" -> {
     GeoBackground -> 
      GeoStyling[
       "StreetMap", 
        GeoServer -> {
         "Wolfram", "AllowProviderChange" :> GIS`$AllowProviderChange}], 
      GeoCenter -> GeoPosition[{0., 0.}], GeoGridLines -> None, 
      GeoGridLinesStyle -> GrayLevel[0.4, 0.3], GeoModel -> "ITRF00", 
      GeoProjection -> "Equirectangular", 
      GeoRange -> {{-90., 90.}, {-180., 180.}}, GeoRangePadding -> None, 
      GeoServer -> {
       "Wolfram", "AllowProviderChange" :> GIS`$AllowProviderChange}, 
      GeoZoomLevel -> 1, 
      MetaInformation -> {
       "Software" -> "Created with the Wolfram Language : www.wolfram.com", 
        "TileSources" -> 
        "Wolfram Knowledgebase with data from OpenStreetMap"}}},
  PlotRange->{{-180., 180.}, {-90., 90.}},
  PlotRangeClipping->True,
  PlotRangePadding->None]], "Output",
 FontSize->14]
}, Closed]]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 FrameBox[
  TagBox[GridBox[{
     {
      StyleBox["\<\"SCRATCH AREA\"\>",
       StripOnInput->False,
       FontFamily->"Source Sans Pro",
       FontSize->18,
       FontWeight->Plain,
       FontColor->GrayLevel[1]]}
    },
    AutoDelete->False,
    GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
    GridBoxSpacings->{"Columns" -> {{0}}, "Rows" -> {{0}}}],
   "Grid"],
  Background->GrayLevel[0.65],
  FrameMargins->{{13, 13}, {2, 5}},
  FrameStyle->None,
  ImageMargins->{{0, 0}, {-2, 0}},
  StripOnInput->False]], "WCIntroDivider",
 CellGroupingRules->{"SectionGrouping", 0}],

Cell[BoxData[""], "WCIntroDividerLine",
 CellFrameColor->GrayLevel[0.65]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"h", " ", "=", " ", 
  RowBox[{"GeoElevationData", "[", 
   TemplateBox[{"\"New York City\"",RowBox[{"Entity", "[", 
       RowBox[{"\"City\"", ",", 
         RowBox[{"{", 
           
           RowBox[{"\"NewYork\"", ",", "\"NewYork\"", ",", 
             "\"UnitedStates\""}], "}"}]}], "]"}],
     "\"Entity[\\\"City\\\", {\\\"NewYork\\\", \\\"NewYork\\\", \
\\\"UnitedStates\\\"}]\"","\"city\""},
    "Entity"], "]"}]}], "\[IndentingNewLine]", 
 RowBox[{"h", "[", 
  RowBox[{"[", 
   RowBox[{"1", ",", "1"}], "]"}], "]"}]}], "Input",
 CellChangeTimes->{{3.758737975905558*^9, 3.758737988780129*^9}, {
  3.758738041789578*^9, 3.7587380433656693`*^9}, {3.758738120245228*^9, 
  3.7587381282881737`*^9}, {3.758738175010459*^9, 3.758738178931319*^9}, {
  3.758738271592784*^9, 3.7587382744483624`*^9}},
 CellLabel->"In[15]:=",ExpressionUUID->"c2aa6a79-c9e9-400f-ae35-6db5938e3842"],

Cell[BoxData[
 TagBox[
  TemplateBox[{RowBox[{
      StyleBox[
       TagBox["QuantityArray", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{
       Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
       TemplateBox[{
         TemplateBox[{
           PaneSelectorBox[{False -> GridBox[{{
                 PaneBox[
                  ButtonBox[
                   DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SquarePlusIconMedium"]], 
                   ButtonFunction :> (Typeset`open$$ = True), Appearance -> 
                   None, Evaluator -> Automatic, Method -> "Preemptive"], 
                  Alignment -> {Center, Center}, ImageSize -> 
                  Dynamic[{
                    Automatic, 3.5 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                 GraphicsBox[{
                   
                   RasterBox[{{{0.66, 0.66, 0.66}, {0.49, 0.49, 0.49}, {0.74, 
                    0.74, 0.74}}, {{0.4, 0.4, 0.4}, {0.8, 0.8, 0.8}, {0.52, 
                    0.52, 0.52}}, {{0.72, 0.72, 0.72}, {0.59, 0.59, 0.59}, {
                    0.79, 0.79, 0.79}}, {{0.58, 0.58, 0.58}, {0.66, 0.66, 
                    0.66}, {0.32, 0.32, 0.32}}}, {{-0.25, -0.33}, {1.25, 
                    2.33}}, {0, 1}], {{Antialiasing -> False, 
                    GrayLevel[0.3], 
                    
                    LineBox[{{{-0.25, 2.33}, {1.25, 2.33}}, {{-0.25, 1.67}, {
                    1.25, 1.67}}, {{-0.25, 1.}, {1.25, 1.}}, {{-0.25, 0.33}, {
                    1.25, 0.33}}, {{-0.25, -0.33}, {1.25, -0.33}}}]}, {
                    Antialiasing -> False, 
                    GrayLevel[0.3], 
                    
                    LineBox[{{{-0.25, -0.33}, {-0.25, 2.33}}, {{
                    0.25, -0.33}, {0.25, 2.33}}, {{0.75, -0.33}, {0.75, 
                    2.33}}, {{1.25, -0.33}, {1.25, 2.33}}}]}}}, 
                  PlotRangeClipping -> True, Background -> GrayLevel[0.93], 
                  Frame -> {{True, True}, {True, True}}, 
                  FrameLabel -> {None, None}, FrameStyle -> {{
                    Directive[
                    GrayLevel[0.2], 
                    AbsoluteThickness[1]], 
                    Directive[
                    Thickness[Tiny], 
                    GrayLevel[0.7]]}, {
                    Directive[
                    Thickness[Tiny], 
                    GrayLevel[0.7]], 
                    Directive[
                    Thickness[Tiny], 
                    GrayLevel[0.7]]}}, FrameTicks -> {{{{-0.25, 
                    FormBox["\"\"", TraditionalForm], {0.25, 0}}, {0.583, 
                    FormBox["\"\"", TraditionalForm], {0.25, 0}}, {1.417, 
                    FormBox["\"\"", TraditionalForm], {0.25, 0}}, {2.25, 
                    FormBox["\"\"", TraditionalForm], {0.25, 0}}, {0.028, 
                    FormBox["\"\"", TraditionalForm], {0.12, 0}}, {0.306, 
                    FormBox["\"\"", TraditionalForm], {0.12, 0}}, {0.861, 
                    FormBox["\"\"", TraditionalForm], {0.12, 0}}, {1.139, 
                    FormBox["\"\"", TraditionalForm], {0.12, 0}}, {1.694, 
                    FormBox["\"\"", TraditionalForm], {0.12, 0}}, {1.972, 
                    FormBox["\"\"", TraditionalForm], {0.12, 0}}}, None}, {
                    None, None}}, GridLinesStyle -> Directive[
                    GrayLevel[0.5, 0.4]], ImagePadding -> 2, 
                  ImageSize -> {Automatic, 
                    
                    Dynamic[(3.5 CurrentValue["FontCapHeight"])/
                    AbsoluteCurrentValue[Magnification], 
                    ImageSizeCache -> {94., {1., 9.}}]}, 
                  Method -> {
                   "DefaultBoundaryStyle" -> Automatic, "DefaultPlotStyle" -> 
                    Automatic}, PlotRangePadding -> {{1, 0}, {0, 0}}], 
                 GridBox[{{
                    RowBox[{
                    TagBox["\"Dimensions: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    RowBox[{"{", 
                    RowBox[{"641", ",", "814"}], "}"}], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Unit: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    TagBox["\"Feet\"", Short[#, 2]& ], "SummaryItem"]}]}}, 
                  GridBoxAlignment -> {
                   "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                  AutoDelete -> False, 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                  GridBoxSpacings -> {
                   "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                  BaseStyle -> {
                   ShowStringCharacters -> False, NumberMarks -> False, 
                    PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
               GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               BaselinePosition -> {1, 1}], True -> GridBox[{{
                 PaneBox[
                  ButtonBox[
                   DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SquareMinusIconMedium"]], 
                   ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                   None, Evaluator -> Automatic, Method -> "Preemptive"], 
                  Alignment -> {Center, Center}, ImageSize -> 
                  Dynamic[{
                    Automatic, 3.5 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                 GraphicsBox[{
                   
                   RasterBox[{{{0.66, 0.66, 0.66}, {0.49, 0.49, 0.49}, {0.74, 
                    0.74, 0.74}}, {{0.4, 0.4, 0.4}, {0.8, 0.8, 0.8}, {0.52, 
                    0.52, 0.52}}, {{0.72, 0.72, 0.72}, {0.59, 0.59, 0.59}, {
                    0.79, 0.79, 0.79}}, {{0.58, 0.58, 0.58}, {0.66, 0.66, 
                    0.66}, {0.32, 0.32, 0.32}}}, {{-0.25, -0.33}, {1.25, 
                    2.33}}, {0, 1}], {{Antialiasing -> False, 
                    GrayLevel[0.3], 
                    
                    LineBox[{{{-0.25, 2.33}, {1.25, 2.33}}, {{-0.25, 1.67}, {
                    1.25, 1.67}}, {{-0.25, 1.}, {1.25, 1.}}, {{-0.25, 0.33}, {
                    1.25, 0.33}}, {{-0.25, -0.33}, {1.25, -0.33}}}]}, {
                    Antialiasing -> False, 
                    GrayLevel[0.3], 
                    
                    LineBox[{{{-0.25, -0.33}, {-0.25, 2.33}}, {{
                    0.25, -0.33}, {0.25, 2.33}}, {{0.75, -0.33}, {0.75, 
                    2.33}}, {{1.25, -0.33}, {1.25, 2.33}}}]}}}, 
                  PlotRangeClipping -> True, Background -> GrayLevel[0.93], 
                  Frame -> {{True, True}, {True, True}}, 
                  FrameLabel -> {None, None}, FrameStyle -> {{
                    Directive[
                    GrayLevel[0.2], 
                    AbsoluteThickness[1]], 
                    Directive[
                    Thickness[Tiny], 
                    GrayLevel[0.7]]}, {
                    Directive[
                    Thickness[Tiny], 
                    GrayLevel[0.7]], 
                    Directive[
                    Thickness[Tiny], 
                    GrayLevel[0.7]]}}, FrameTicks -> {{{{-0.25, 
                    FormBox["\"\"", TraditionalForm], {0.25, 0}}, {0.583, 
                    FormBox["\"\"", TraditionalForm], {0.25, 0}}, {1.417, 
                    FormBox["\"\"", TraditionalForm], {0.25, 0}}, {2.25, 
                    FormBox["\"\"", TraditionalForm], {0.25, 0}}, {0.028, 
                    FormBox["\"\"", TraditionalForm], {0.12, 0}}, {0.306, 
                    FormBox["\"\"", TraditionalForm], {0.12, 0}}, {0.861, 
                    FormBox["\"\"", TraditionalForm], {0.12, 0}}, {1.139, 
                    FormBox["\"\"", TraditionalForm], {0.12, 0}}, {1.694, 
                    FormBox["\"\"", TraditionalForm], {0.12, 0}}, {1.972, 
                    FormBox["\"\"", TraditionalForm], {0.12, 0}}}, None}, {
                    None, None}}, GridLinesStyle -> Directive[
                    GrayLevel[0.5, 0.4]], ImagePadding -> 2, 
                  ImageSize -> {Automatic, 
                    
                    Dynamic[(3.5 CurrentValue["FontCapHeight"])/
                    AbsoluteCurrentValue[Magnification], 
                    ImageSizeCache -> {94., {1., 9.}}]}, 
                  Method -> {
                   "DefaultBoundaryStyle" -> Automatic, "DefaultPlotStyle" -> 
                    Automatic}, PlotRangePadding -> {{1, 0}, {0, 0}}], 
                 GridBox[{{
                    RowBox[{
                    TagBox["\"Dimensions: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    RowBox[{"{", 
                    RowBox[{"641", ",", "814"}], "}"}], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Unit: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    TagBox["\"Feet\"", Short[#, 2]& ], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"MinMax: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    RowBox[{"{", 
                    RowBox[{
                    TemplateBox[{
                    RowBox[{"-", "226.3779527559055`"}], "\"ft\"", "feet", 
                    "\"Feet\""}, "Quantity", SyntaxForm -> Mod], ",", 
                    
                    TemplateBox[{
                    "705.3805774278215`", "\"ft\"", "feet", "\"Feet\""}, 
                    "Quantity", SyntaxForm -> Mod]}], "}"}], 
                    "SummaryItem"]}]}}, 
                  GridBoxAlignment -> {
                   "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                  AutoDelete -> False, 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                  GridBoxSpacings -> {
                   "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                  BaseStyle -> {
                   ShowStringCharacters -> False, NumberMarks -> False, 
                    PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
               GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               BaselinePosition -> {1, 1}]}, 
            Dynamic[Typeset`open$$], ImageSize -> Automatic]}, 
          "SummaryPanel"], 
         ButtonBox[
          DynamicBox[
           ToBoxes[
            If[
             
             Or[$VersionNumber < 11.2, CurrentValue["RunningEvaluator"] =!= 
              "Local"], 
             Style["This object cannot be used as input.", "SummaryEmbed"], 
             BoxForm`EmbedSummaryLabel[QuantityArray, 4174816, 
              Dynamic[Typeset`embedState$$]]], StandardForm]], ButtonFunction :> 
          BoxForm`EmbedSummaryInterpretation[
           QuantityArray, 
            6349082027094528545927375942863096908216363216099919560000, 
            EvaluationBox[], 
            Dynamic[Typeset`embedState$$], StandardForm], DefaultBaseStyle -> 
          "SummaryEmbedButton", BaseStyle -> {"DialogStyle"}, Enabled -> 
          Dynamic[
            
            And[$VersionNumber >= 11.2, CurrentValue["RunningEvaluator"] === 
             "Local", Typeset`embedState$$ === "Ready"]], Appearance -> 
          Inherited, Method -> Inherited, Evaluator -> Automatic]}, 
        "SummaryEmbedGrid"], DynamicModuleValues :> {}], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->(
    "StructuredArray[QuantityArray, {641, 814}, <Feet>]"& )],
  False,
  BoxID -> 6349082027094528545927375942863096908216363216099919560000,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.758737995117432*^9, 3.758738072011066*^9, 
  3.7587381288982267`*^9, 3.758738179202949*^9, 3.7587382946899014`*^9},
 CellLabel->"Out[15]=",ExpressionUUID->"ccbb4f80-00cb-459b-a6d8-d725fde84c0d"],

Cell[BoxData[
 TemplateBox[{"232.93963254593177`","\"ft\"","feet","\"Feet\""},
  "Quantity"]], "Output",
 CellChangeTimes->{3.758737995117432*^9, 3.758738072011066*^9, 
  3.7587381288982267`*^9, 3.758738179202949*^9, 3.75873829473878*^9},
 CellLabel->"Out[16]=",ExpressionUUID->"94b2d19f-2315-40ae-948d-92b1b099703e"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"GeoPosition", "[", 
  RowBox[{"{", 
   RowBox[{"40", ",", "115"}], "}"}], "]"}]], "Input",
 CellChangeTimes->{3.758738168701438*^9},
 CellLabel->"In[9]:=",ExpressionUUID->"76a18255-8125-45f2-abe1-147544831fc0"],

Cell[BoxData[
 RowBox[{"GeoPosition", "[", 
  RowBox[{"{", 
   RowBox[{"40", ",", "115"}], "}"}], "]"}]], "Output",
 CellChangeTimes->{3.758738169373139*^9},
 CellLabel->"Out[9]=",ExpressionUUID->"e15d73b0-df96-4f2a-acb1-5adce27c6142"]
}, Open  ]],

Cell[BoxData[
 RowBox[{"pos", " ", "=", " ", 
  NamespaceBox["WolframAlphaQueryParseResults",
   DynamicModuleBox[{Typeset`q$$ = "Paris", Typeset`newq$$ = "Paris", 
    Typeset`chosen$$ = 
    "Entity[\"City\", {\"Paris\", \"IleDeFrance\", \"France\"}]", 
    Typeset`open$$ = False}, 
    PaneSelectorBox[{False->
     DynamicModuleBox[{WolframAlphaClient`Private`show$$ = False, 
      WolframAlphaClient`Private`assumptionsQ$$ = True}, 
      TagBox[
       FrameBox[
        TagBox[GridBox[{
           {
            InputFieldBox[Dynamic[Typeset`newq$$], String,
             Appearance->None,
             BaseStyle->{"CalculateInput"},
             ContinuousAction->True,
             Enabled->True,
             FieldSize->{{1, 40}, {1, 
                DirectedInfinity[1]}},
             TrapSelection->False], 
            ButtonBox[
             TagBox[
              TooltipBox[
               StyleBox["\<\"\[RightGuillemet]\"\>",
                StripOnInput->False,
                LineColor->RGBColor[1, 0.5, 0],
                FrontFaceColor->RGBColor[1, 0.5, 0],
                BackFaceColor->RGBColor[1, 0.5, 0],
                GraphicsColor->RGBColor[1, 0.5, 0],
                FontColor->RGBColor[1, 0.5, 0]],
               DynamicBox[
                ToBoxes[
                 FEPrivate`FrontEndResource[
                 "WAStrings", "InterpretationAssumptions"], StandardForm]]],
              Annotation[#, 
               Dynamic[
                FEPrivate`FrontEndResource[
                "WAStrings", "InterpretationAssumptions"]], "Tooltip"]& ],
             Appearance->None,
             BaselinePosition->Baseline,
             ButtonFunction:>(Quiet[
                WolframAlpha[]]; Typeset`open$$ = True; 
              WolframAlphaClient`Private`extrudeFromFastParse["Paris", 
                Defer[
                 Entity["City", {"Paris", "IleDeFrance", "France"}]], 
                "Fast parse"]; Typeset`open$$ = False),
             ContentPadding->False,
             Evaluator->Automatic,
             Method->"Queued"], 
            ItemBox[
             ButtonBox[
              PaneSelectorBox[{True->
               TagBox[
                TooltipBox[
                 
                 DynamicBox[FEPrivate`FrontEndResource[
                  "WABitmaps", "OrangeSquarePlus"],
                  ImageSizeCache->{10., {3., 8.}}],
                 DynamicBox[
                  ToBoxes[
                   FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"], 
                   StandardForm]]],
                Annotation[#, 
                 Dynamic[
                  FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"]], 
                 "Tooltip"]& ], False->
               TagBox[
                TooltipBox[
                 
                 DynamicBox[FEPrivate`FrontEndResource[
                  "WABitmaps", "GraySquarePlus"],
                  ImageSizeCache->{10., {3., 8.}}],
                 DynamicBox[
                  ToBoxes[
                   FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"], 
                   StandardForm]]],
                Annotation[#, 
                 Dynamic[
                  FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"]], 
                 "Tooltip"]& ]}, Dynamic[WolframAlphaClient`Private`show$$],
               ImageSize->All],
              Appearance->None,
              ButtonFunction:>(Quiet[
                 WolframAlpha[]]; If[
                 Or[
                  CurrentValue["OptionKey"], 
                  CurrentValue["AltKey"]], SelectionMove[
                   ButtonNotebook[], All, ButtonCell, AutoScroll -> False]; 
                 NotebookWrite[
                   ButtonNotebook[], 
                   Cell[
                   Typeset`newq$$, "WolframAlphaShort", FormatType -> 
                    "TextForm"], All], Typeset`open$$ = True; 
                 WolframAlphaClient`Private`extrudeFromFastParse["Paris", 
                   Defer[
                    Entity["City", {"Paris", "IleDeFrance", "France"}]], 
                   "Fast parse"]; Typeset`open$$ = False]),
              Evaluator->Automatic,
              Method->"Queued"],
             Alignment->{Right, Top},
             StripOnInput->False]},
           {
            PaneBox[
             TagBox[
              TooltipBox[
               ButtonBox[
                PaneSelectorBox[{False->
                 StyleBox[
                  TemplateBox[{"\"Paris\"",RowBox[{"Entity", "[", 
                    RowBox[{"\"City\"", ",", 
                    RowBox[{"{", 
                    
                    RowBox[{
                    "\"Paris\"", ",", "\"IleDeFrance\"", ",", "\"France\""}], 
                    "}"}]}], "]"}],
                    "\"Entity[\\\"City\\\", {\\\"Paris\\\", \\\"IleDeFrance\\\
\", \\\"France\\\"}]\"","\"city\""},
                   "Entity"],
                  StripOnInput->False,
                  NumberMarks->False], True->
                 StyleBox[
                  TemplateBox[{"\"Paris\"",RowBox[{"Entity", "[", 
                    RowBox[{"\"City\"", ",", 
                    RowBox[{"{", 
                    
                    RowBox[{
                    "\"Paris\"", ",", "\"IleDeFrance\"", ",", "\"France\""}], 
                    "}"}]}], "]"}],
                    "\"Entity[\\\"City\\\", {\\\"Paris\\\", \\\"IleDeFrance\\\
\", \\\"France\\\"}]\"","\"city\""},
                   "Entity"],
                  StripOnInput->False,
                  ShowSyntaxStyles->False,
                  NumberMarks->False,
                  FontColor->RGBColor[1, 0.5, 0]]}, Dynamic[
                  CurrentValue["MouseOver"]],
                 BaseStyle->{ShowStringCharacters -> True},
                 FrameMargins->0,
                 ImageSize->Automatic],
                Alignment->Left,
                Appearance->None,
                BaseStyle->{},
                ButtonFunction:>(SelectionMove[
                   ButtonNotebook[], All, ButtonCell]; NotebookWrite[
                   ButtonNotebook[], 
                   Cell[
                    BoxData[
                    TemplateBox[{"\"Paris\"", 
                    RowBox[{"Entity", "[", 
                    RowBox[{"\"City\"", ",", 
                    RowBox[{"{", 
                    
                    RowBox[{"\"Paris\"", ",", "\"IleDeFrance\"", ",", 
                    "\"France\""}], "}"}]}], "]"}], 
                    "\"Entity[\\\"City\\\", {\\\"Paris\\\", \\\"IleDeFrance\\\
\", \\\"France\\\"}]\"", "\"city\""}, "Entity"]], "Input"], All]; 
                 SelectionMove[
                   ButtonNotebook[], After, CellContents]),
                Evaluator->Automatic,
                ImageSize->Automatic,
                Method->"Preemptive"],
               DynamicBox[
                ToBoxes[
                 FEPrivate`FrontEndResource["WAStrings", "RemoveResults"], 
                 StandardForm]]],
              Annotation[#, 
               Dynamic[
                FEPrivate`FrontEndResource["WAStrings", "RemoveResults"]], 
               "Tooltip"]& ],
             AppearanceElements->{},
             BaseStyle->{ShowStringCharacters -> True, ScriptLevel -> 0},
             ImageSize->{Automatic, {1, 100}},
             Scrollbars->{False, Automatic}], "\[SpanFromLeft]", 
            "\[SpanFromLeft]"}
          },
          AutoDelete->False,
          BaselinePosition->{1, 1},
          FrameStyle->GrayLevel[0.85],
          GridBoxAlignment->{"Columns" -> {{Left}}},
          
          GridBoxDividers->{
           "Columns" -> {{False}}, "Rows" -> {False, {True}, False}},
          
          GridBoxItemSize->{
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
         "Grid"],
        Alignment->Top,
        Background->Dynamic[
          FEPrivate`If[
           FEPrivate`And[
            FEPrivate`SameQ[
             FEPrivate`Head[Typeset`newq$$], String], 
            FEPrivate`UnsameQ[Typeset`q$$, Typeset`newq$$]], 
           RGBColor[1., 0.975, 0.95], 
           GrayLevel[1]]],
        BaselinePosition->Baseline,
        FrameStyle->GrayLevel[0.85],
        ImageSize->Automatic,
        RoundingRadius->5,
        StripOnInput->False],
       EventHandlerTag[{
        "MouseEntered" :> 
         FEPrivate`Set[WolframAlphaClient`Private`show$$, True], 
         "MouseExited" :> 
         FEPrivate`Set[WolframAlphaClient`Private`show$$, False], Method -> 
         "Preemptive", PassEventsDown -> Automatic, PassEventsUp -> True}]],
      DynamicModuleValues:>{}], True->
     TagBox[GridBox[{
        {
         DynamicModuleBox[{WolframAlphaClient`Private`show$$ = False, 
          WolframAlphaClient`Private`assumptionsQ$$ = True}, 
          TagBox[
           FrameBox[
            TagBox[GridBox[{
               {
                InputFieldBox[Dynamic[Typeset`newq$$], String,
                 Appearance->None,
                 BaseStyle->{"CalculateInput"},
                 ContinuousAction->True,
                 Enabled->True,
                 FieldSize->{{1, 40}, {1, 
                    DirectedInfinity[1]}},
                 TrapSelection->False], 
                ButtonBox[
                 TagBox[
                  TooltipBox[
                   StyleBox["\<\"\[RightGuillemet]\"\>",
                    StripOnInput->False,
                    LineColor->RGBColor[1, 0.5, 0],
                    FrontFaceColor->RGBColor[1, 0.5, 0],
                    BackFaceColor->RGBColor[1, 0.5, 0],
                    GraphicsColor->RGBColor[1, 0.5, 0],
                    FontColor->RGBColor[1, 0.5, 0]],
                   DynamicBox[
                    ToBoxes[
                    FEPrivate`FrontEndResource[
                    "WAStrings", "InterpretationAssumptions"], StandardForm]]],
                  Annotation[#, 
                   Dynamic[
                    FEPrivate`FrontEndResource[
                    "WAStrings", "InterpretationAssumptions"]], "Tooltip"]& ],
                 
                 Appearance->None,
                 BaselinePosition->Baseline,
                 ButtonFunction:>(Quiet[
                    WolframAlpha[]]; Typeset`open$$ = True; 
                  WolframAlphaClient`Private`extrudeFromFastParse["Paris", 
                    Defer[
                    Entity["City", {"Paris", "IleDeFrance", "France"}]], 
                    "Fast parse"]; Typeset`open$$ = False),
                 ContentPadding->False,
                 Evaluator->Automatic,
                 Method->"Queued"], 
                ItemBox[
                 ButtonBox[
                  PaneSelectorBox[{True->
                   TagBox[
                    TooltipBox[
                    
                    DynamicBox[FEPrivate`FrontEndResource[
                    "WABitmaps", "OrangeSquarePlus"]],
                    DynamicBox[
                    ToBoxes[
                    FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"],
                     StandardForm]]],
                    Annotation[#, 
                    Dynamic[
                    FEPrivate`FrontEndResource[
                    "WAStrings", "ShowAllResults"]], "Tooltip"]& ], False->
                   TagBox[
                    TooltipBox[
                    
                    DynamicBox[FEPrivate`FrontEndResource[
                    "WABitmaps", "GraySquarePlus"]],
                    DynamicBox[
                    ToBoxes[
                    FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"],
                     StandardForm]]],
                    Annotation[#, 
                    Dynamic[
                    FEPrivate`FrontEndResource[
                    "WAStrings", "ShowAllResults"]], "Tooltip"]& ]}, Dynamic[
                   WolframAlphaClient`Private`show$$],
                   ImageSize->All],
                  Appearance->None,
                  ButtonFunction:>(Quiet[
                    WolframAlpha[]]; If[
                    Or[
                    CurrentValue["OptionKey"], 
                    CurrentValue["AltKey"]], SelectionMove[
                    ButtonNotebook[], All, ButtonCell, AutoScroll -> False]; 
                    NotebookWrite[
                    ButtonNotebook[], 
                    Cell[
                    Typeset`newq$$, "WolframAlphaShort", FormatType -> 
                    "TextForm"], All], Typeset`open$$ = True; 
                    WolframAlphaClient`Private`extrudeFromFastParse["Paris", 
                    Defer[
                    Entity["City", {"Paris", "IleDeFrance", "France"}]], 
                    "Fast parse"]; Typeset`open$$ = False]),
                  Evaluator->Automatic,
                  Method->"Queued"],
                 Alignment->{Right, Top},
                 StripOnInput->False]},
               {
                PaneBox[
                 TagBox[
                  TooltipBox[
                   ButtonBox[
                    PaneSelectorBox[{False->
                    StyleBox[
                    TemplateBox[{"\"Paris\"",RowBox[{"Entity", "[", 
                    RowBox[{"\"City\"", ",", 
                    RowBox[{"{", 
                    
                    RowBox[{"\"Paris\"", ",", "\"IleDeFrance\"", ",", 
                    "\"France\""}], "}"}]}], "]"}],
                    "\"Entity[\\\"City\\\", {\\\"Paris\\\", \\\"IleDeFrance\\\
\", \\\"France\\\"}]\"","\"city\""},
                    "Entity"],
                    StripOnInput->False,
                    NumberMarks->False], True->
                    StyleBox[
                    TemplateBox[{"\"Paris\"",RowBox[{"Entity", "[", 
                    RowBox[{"\"City\"", ",", 
                    RowBox[{"{", 
                    
                    RowBox[{"\"Paris\"", ",", "\"IleDeFrance\"", ",", 
                    "\"France\""}], "}"}]}], "]"}],
                    "\"Entity[\\\"City\\\", {\\\"Paris\\\", \\\"IleDeFrance\\\
\", \\\"France\\\"}]\"","\"city\""},
                    "Entity"],
                    StripOnInput->False,
                    ShowSyntaxStyles->False,
                    NumberMarks->False,
                    FontColor->RGBColor[1, 0.5, 0]]}, Dynamic[
                    CurrentValue["MouseOver"]],
                    BaseStyle->{ShowStringCharacters -> True},
                    FrameMargins->0,
                    ImageSize->Automatic],
                    Alignment->Left,
                    Appearance->None,
                    BaseStyle->{},
                    ButtonFunction:>(SelectionMove[
                    ButtonNotebook[], All, ButtonCell]; NotebookWrite[
                    ButtonNotebook[], 
                    Cell[
                    BoxData[
                    TemplateBox[{"\"Paris\"", 
                    RowBox[{"Entity", "[", 
                    RowBox[{"\"City\"", ",", 
                    RowBox[{"{", 
                    
                    RowBox[{"\"Paris\"", ",", "\"IleDeFrance\"", ",", 
                    "\"France\""}], "}"}]}], "]"}], 
                    "\"Entity[\\\"City\\\", {\\\"Paris\\\", \\\"IleDeFrance\\\
\", \\\"France\\\"}]\"", "\"city\""}, "Entity"]], "Input"], All]; 
                    SelectionMove[
                    ButtonNotebook[], After, CellContents]),
                    Evaluator->Automatic,
                    ImageSize->Automatic,
                    Method->"Preemptive"],
                   DynamicBox[
                    ToBoxes[
                    FEPrivate`FrontEndResource["WAStrings", "RemoveResults"], 
                    StandardForm]]],
                  Annotation[#, 
                   Dynamic[
                    FEPrivate`FrontEndResource["WAStrings", "RemoveResults"]],
                    "Tooltip"]& ],
                 AppearanceElements->{},
                 BaseStyle->{ShowStringCharacters -> True, ScriptLevel -> 0},
                 ImageSize->{Automatic, {1, 100}},
                 Scrollbars->{False, Automatic}], "\[SpanFromLeft]", 
                "\[SpanFromLeft]"}
              },
              AutoDelete->False,
              BaselinePosition->{1, 1},
              FrameStyle->GrayLevel[0.85],
              GridBoxAlignment->{"Columns" -> {{Left}}},
              
              GridBoxDividers->{
               "Columns" -> {{False}}, "Rows" -> {False, {True}, False}},
              GridBoxItemSize->{
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
             "Grid"],
            Alignment->Top,
            Background->Dynamic[
              FEPrivate`If[
               FEPrivate`And[
                FEPrivate`SameQ[
                 FEPrivate`Head[Typeset`newq$$], String], 
                FEPrivate`UnsameQ[Typeset`q$$, Typeset`newq$$]], 
               RGBColor[1., 0.975, 0.95], 
               GrayLevel[1]]],
            BaselinePosition->Baseline,
            FrameStyle->GrayLevel[0.85],
            ImageSize->Automatic,
            RoundingRadius->5,
            StripOnInput->False],
           
           EventHandlerTag[{
            "MouseEntered" :> 
             FEPrivate`Set[WolframAlphaClient`Private`show$$, True], 
             "MouseExited" :> 
             FEPrivate`Set[WolframAlphaClient`Private`show$$, False], Method -> 
             "Preemptive", PassEventsDown -> Automatic, PassEventsUp -> 
             True}]],
          DynamicModuleValues:>{}]},
        {
         InterpretationBox[
          StyleBox[
           
           DynamicBox[FEPrivate`FrontEndResource[
            "FEExpressions", "NecklaceAnimator"][20]],
           AnimatorBoxOptions->{ImageSize->20}],
          Animator[Appearance -> "Necklace", ImageSize -> 20],
          BaseStyle->{"Deploy"}]}
       },
       BaselinePosition->{1, 1},
       DefaultBaseStyle->"Column",
       GridBoxAlignment->{"Columns" -> {{Left}}},
       GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
      "Column"]}, Dynamic[
      TrueQ[Typeset`open$$]],
     BaseStyle->{Deployed -> True},
     ImageSize->Automatic],
    DynamicModuleValues:>{}],
   BaseStyle->{Deployed -> True},
   DeleteWithContents->True,
   Editable->False,
   SelectWithContents->True]}]], "WolframAlphaShortInput",
 CellChangeTimes->{{3.758738312027534*^9, 3.758738314156351*^9}},
 CellTags->"NoLabel",
 CellLabel->"In[18]:=",ExpressionUUID->"1f979158-10b6-4930-b46b-c7c9603392b6"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"LatitudeLongitude", "[", "pos", "]"}]], "Input",
 CellChangeTimes->{{3.758738401254263*^9, 3.758738409468401*^9}},
 CellTags->"NoLabel",
 CellLabel->"In[19]:=",ExpressionUUID->"200456f7-15d1-4eda-831c-3fb76b6df755"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   TemplateBox[{
    "48.86`",RowBox[{"\[InvisibleSpace]", "\"\[Degree]\""}],"degrees",
     "\"AngularDegrees\""},
    "QuantityPostfix"], ",", 
   TemplateBox[{
    "2.34`",RowBox[{"\[InvisibleSpace]", "\"\[Degree]\""}],"degrees",
     "\"AngularDegrees\""},
    "QuantityPostfix"]}], "}"}]], "Output",
 CellChangeTimes->{3.7587384115631123`*^9},
 CellTags->"NoLabel",
 CellLabel->"Out[19]=",ExpressionUUID->"2b1228c7-0609-4b5b-98cd-49c0c0e26b1a"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"QuantityMagnitude", "[", 
   RowBox[{"GeoElevationData", "[", 
    RowBox[{"GeoPosition", "[", 
     RowBox[{"{", 
      RowBox[{"40", ",", "115"}], "}"}], "]"}], "]"}], "]"}], ">", " ", 
  "0"}]], "Input",
 CellChangeTimes->{{3.758738594451042*^9, 3.758738688413887*^9}, {
  3.758738788311822*^9, 3.75873880039671*^9}},
 CellLabel->"In[30]:=",ExpressionUUID->"201882fb-d940-4427-ba33-e2a66f04a731"],

Cell[BoxData["True"], "Output",
 CellChangeTimes->{{3.7587385999232607`*^9, 3.7587386063451242`*^9}, {
  3.758738637411993*^9, 3.758738688934763*^9}, {3.758738789752089*^9, 
  3.758738800784767*^9}},
 CellLabel->"Out[30]=",ExpressionUUID->"445f59e3-6e5f-48ad-8d63-5b917e6f8ddd"]
}, Open  ]],

Cell[BoxData[
 FrameBox[
  TagBox[GridBox[{
     {
      StyleBox["\<\"ENTER YOUR CODE HERE\"\>",
       StripOnInput->False,
       FontFamily->"Source Sans Pro",
       FontSize->18,
       FontWeight->Plain,
       FontColor->GrayLevel[1]]}
    },
    AutoDelete->False,
    GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
    GridBoxSpacings->{"Columns" -> {{0}}, "Rows" -> {{0}}}],
   "Grid"],
  Background->RGBColor[0.9961, 0.3098, 0.21569],
  FrameMargins->{{13, 13}, {2, 8}},
  FrameStyle->None,
  ImageMargins->{{0, 0}, {-2, 0}},
  StripOnInput->False]], "WCIntroDivider"],

Cell[BoxData[""], "WCIntroDividerLine"],

Cell[BoxData[
 RowBox[{
  RowBox[{"AntipodeAboveSeaLevelQ", "[", "loc_", "]"}], ":=", " ", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"lat", ",", " ", "long", ",", " ", "antipode"}], "}"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"{", 
       RowBox[{"lat", ",", " ", "long"}], "}"}], " ", "=", " ", 
      RowBox[{"LatitudeLongitude", "[", "loc", "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"antipode", " ", "=", " ", 
      RowBox[{"GeoPosition", "[", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"lat", "*", 
          RowBox[{"-", "1"}]}], ",", " ", 
         RowBox[{
          RowBox[{"(", 
           RowBox[{"180", "-", 
            RowBox[{"Abs", "[", "long", "]"}]}], ")"}], "*", 
          RowBox[{"-", "1"}], "*", 
          RowBox[{"Sign", "[", "long", "]"}]}]}], "}"}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"QuantityMagnitude", "[", 
       RowBox[{"GeoElevationData", "[", "antipode", "]"}], "]"}], " ", ">", 
      " ", "0"}]}]}], "\[IndentingNewLine]", "]"}]}]], "Input",
 CellChangeTimes->{{3.758737878396847*^9, 3.7587379335293083`*^9}, {
   3.758738078409382*^9, 3.758738078760852*^9}, {3.75873835057869*^9, 
   3.758738360494075*^9}, 3.758738396084839*^9, {3.758738447427021*^9, 
   3.7587384918440847`*^9}, {3.758738692667047*^9, 3.75873872734131*^9}, {
   3.7587387637227793`*^9, 3.758738771500555*^9}, {3.758738814839514*^9, 
   3.7587389133541203`*^9}, {3.758739004434019*^9, 3.758739005574955*^9}, {
   3.758739115698457*^9, 3.758739129333449*^9}},
 CellTags->"NoLabel",
 CellLabel->"In[33]:=",ExpressionUUID->"03bebf05-a6f1-4f8d-9110-60183e494084"]
}, Open  ]],

Cell[BoxData[
 TemplateBox[{
  DynamicModuleBox[{
    WolframChallenges`Notebooks`Authoring`Private`$inSubmit$$ = False}, 
    ButtonBox[
     DynamicBox[
      ToBoxes[
       If[
        TrueQ[WolframChallenges`Notebooks`Authoring`Private`$inSubmit$$], 
        Framed[
         Panel[
          ProgressIndicator[Appearance -> "Percolate", ImageSize -> {60, 20}],
           Background -> White, ImageSize -> {100, 20}, FrameMargins -> 0, 
          Alignment -> Center, Appearance -> "Frameless"], Background -> 
         GrayLevel[1], FrameStyle -> RGBColor[0.9961, 0.3098, 0.21569], 
         RoundingRadius -> 3, Alignment -> Center], 
        Mouseover[
         Framed[
          Panel[
           Style["Submit", "ButtonLabel", ShowStringCharacters -> False], 
           Background -> RGBColor[0.9961, 0.3098, 0.21569], 
           ImageSize -> {100, 20}, FrameMargins -> 0, Alignment -> Center, 
           Appearance -> "Frameless"], Background -> 
          RGBColor[0.9961, 0.3098, 0.21569], FrameStyle -> 
          RGBColor[0.9961, 0.3098, 0.21569], RoundingRadius -> 3, Alignment -> 
          Center], 
         Framed[
          Panel[
           Style[
           "Submit", "ButtonLabelActive", ShowStringCharacters -> False], 
           Background -> GrayLevel[1], ImageSize -> {100, 20}, FrameMargins -> 
           0, Alignment -> Center, Appearance -> "Frameless"], Background -> 
          GrayLevel[1], FrameStyle -> RGBColor[0.9961, 0.3098, 0.21569], 
          RoundingRadius -> 3, Alignment -> Center]]], StandardForm], 
      ImageSizeCache -> {112., {13., 19.}}], Appearance -> None, 
     ButtonFunction :> ((
      WolframChallenges`Notebooks`Authoring`Private`$inSubmit$$ = True; (Off[
         MessageName[$CharacterEncoding, "utf8"]]; ((If[
          Not[
           TrueQ[
            WolframChallenges`$NotebookInitializedQ[
             Hash[{$SessionID, 
               Last[
                EvaluationNotebook[]]}]]]], 
          CloudGet[
           FileNameJoin[{
             CloudObject[
             "https://www.wolframcloud.com/objects/wolframchallenges/public/\
symbols"], "InitializeNotebook"}]][]]; If[
          Not[
           ValueQ[
           WolframChallenges`Notebooks`Dialogs`RunWithSubmissionPolicy]], 
          WolframChallenges`Notebooks`Dialogs`RunWithSubmissionPolicy = 
          CloudGet[
            FileNameJoin[{
              CloudObject[
              "https://www.wolframcloud.com/objects/wolframchallenges/public/\
symbols"], "RunWithSubmissionPolicy"}]]]; 
        WolframChallenges`Notebooks`Dialogs`RunWithSubmissionPolicy[If[
            Or[$VersionNumber >= 11.1, 
             ChoiceDialog[
              StringJoin["Wolfram Challenges is designed for version ", 
               ToString[11.1], 
               " or later of the Wolfram System, and may not function \
properly with the older ", 
               "kernel you are using. Contact Wolfram Research \
(www.wolfram.com) for upgrade information."]]], 
            If[
             Not[
              StringQ[
               If[
                Not[$CloudConnected], 
                CloudConnect[], $WolframID]]], 
             MessageDialog[
             "Users must authenticate with the cloud in order to submit \
solutions."], WolframChallenges`$SubmissionTesting = False; Quiet[
               Quiet[If[
                  TrueQ[WolframChallenges`Common`$ActiveClearing], 
                  Quiet[
                   Unset[
                    Once["public-2.17.205"; CloudGet[
                    CloudObject[
                    "https://www.wolframcloud.com/objects/wolframchallenges/\
public/symbols/HandleResponse"]], "KernelSession"]]]]; Catch[
                  
                  Module[{CodeEquivalence`Utilities`Private`result$}, 
                   Check[CodeEquivalence`Utilities`Private`result$ = 
                    CodeEquivalence`Utilities`Private`once[
                    "public-2.17.205"; CloudGet[
                    CloudObject[
                    "https://www.wolframcloud.com/objects/wolframchallenges/\
public/symbols/HandleResponse"]], "KernelSession"], Quiet[
                    Unset[
                    CodeEquivalence`Utilities`Private`once[
                    "public-2.17.205"; CloudGet[
                    CloudObject[
                    "https://www.wolframcloud.com/objects/wolframchallenges/\
public/symbols/HandleResponse"]], "KernelSession"]]]; 
                    Throw[CodeEquivalence`Utilities`Private`result$, 
                    CodeEquivalence`Utilities`OnceUnlessFailed]]; If[
                    FailureQ[CodeEquivalence`Utilities`Private`result$], Quiet[
                    Unset[
                    CodeEquivalence`Utilities`Private`once[
                    "public-2.17.205"; CloudGet[
                    CloudObject[
                    "https://www.wolframcloud.com/objects/wolframchallenges/\
public/symbols/HandleResponse"]], "KernelSession"]]]; (Message[
                    "Evaluating `1` resulted in the failure `2`.", 
                    Short[
                    HoldForm["public-2.17.205"; CloudGet[
                    CloudObject[
                    "https://www.wolframcloud.com/objects/wolframchallenges/\
public/symbols/HandleResponse"]]]], 
                    Short[
                    HoldForm[#]]]& )[
                    CodeEquivalence`Utilities`Private`result$]]; 
                   CodeEquivalence`Utilities`Private`result$], 
                  CodeEquivalence`Utilities`OnceUnlessFailed], 
                MessageName[CloudObject, "invuri"]], 
               MessageName[$CharacterEncoding, "utf8"]][
               Quiet[
                Quiet[If[
                   TrueQ[WolframChallenges`Common`$ActiveClearing], 
                   Quiet[
                    Unset[
                    Once["public-2.17.205"; CloudGet[
                    CloudObject[
                    "https://www.wolframcloud.com/objects/wolframchallenges/\
public/symbols/CheckAnswer"]], "KernelSession"]]]]; Catch[
                   
                   Module[{CodeEquivalence`Utilities`Private`result$}, 
                    Check[CodeEquivalence`Utilities`Private`result$ = 
                    CodeEquivalence`Utilities`Private`once[
                    "public-2.17.205"; CloudGet[
                    CloudObject[
                    "https://www.wolframcloud.com/objects/wolframchallenges/\
public/symbols/CheckAnswer"]], "KernelSession"], Quiet[
                    Unset[
                    CodeEquivalence`Utilities`Private`once[
                    "public-2.17.205"; CloudGet[
                    CloudObject[
                    "https://www.wolframcloud.com/objects/wolframchallenges/\
public/symbols/CheckAnswer"]], "KernelSession"]]]; 
                    Throw[CodeEquivalence`Utilities`Private`result$, 
                    CodeEquivalence`Utilities`OnceUnlessFailed]]; If[
                    FailureQ[CodeEquivalence`Utilities`Private`result$], Quiet[
                    Unset[
                    CodeEquivalence`Utilities`Private`once[
                    "public-2.17.205"; CloudGet[
                    CloudObject[
                    "https://www.wolframcloud.com/objects/wolframchallenges/\
public/symbols/CheckAnswer"]], "KernelSession"]]]; (Message[
                    "Evaluating `1` resulted in the failure `2`.", 
                    Short[
                    HoldForm["public-2.17.205"; CloudGet[
                    CloudObject[
                    "https://www.wolframcloud.com/objects/wolframchallenges/\
public/symbols/CheckAnswer"]]]], 
                    Short[
                    HoldForm[#]]]& )[
                    CodeEquivalence`Utilities`Private`result$]]; 
                    CodeEquivalence`Utilities`Private`result$], 
                   CodeEquivalence`Utilities`OnceUnlessFailed], 
                 MessageName[CloudObject, "invuri"]], 
                MessageName[$CharacterEncoding, "utf8"]][
                CloudObject[
                "https://www.wolframcloud.com/objects/wolframchallenges/\
public/api/check"], {"AntipodeAboveSeaLevelQ"}, 
                "public/pub/p-41eeded0e97e539f"]]]]; Null])& )[]); 
      WolframChallenges`Notebooks`Authoring`Private`$inSubmit$$ = False; 
      Null)& )[], Evaluator -> Automatic, Method -> "Queued"], 
    DynamicModuleValues :> {}, 
    Initialization :> {
     WolframChallenges`Notebooks`Authoring`Private`$inSubmit$$ = False}],
   TemplateBox[{10}, "Spacer1"],DynamicBox[
    ToBoxes[
     Refresh[Off[
        MessageName[$CharacterEncoding, "utf8"]]; If[
        Not[
         TrueQ[$CloudConnected]], 
        Column[{
          Row[{
            Text[
             Style[
             "Note: ", "SigninText", FontWeight -> "DemiBold", Background -> 
              None]], 
            Text[
             Button[
              
              PaneSelector[{
               False -> "Sign into the Wolfram Cloud", True -> 
                "Sign into the Wolfram Cloud"}, 
               Dynamic[
                CurrentValue["MouseOver"], 
                ImageSizeCache -> {48., {1., 12.}}], 
               BaseStyle -> {"SigninText", 
                 RGBColor["#36b1bf"]}, FrameMargins -> 0, ImageSize -> 
               Automatic], 
              CloudConnect[], Appearance -> None, Evaluator -> Automatic, 
              Method -> "Queued"]], 
            Text[
             Style[
             " to save your work on ", "SigninText", Background -> None]]}], 
          Text[
           Style[
           "Challenges and keep track of progress.", "SigninText", Background -> 
            None]]}, Alignment -> Left, Spacings -> 0], 
        Invisible[""]], UpdateInterval -> 1], StandardForm]]},
  "RowDefault"]], "SubmitRow",ExpressionUUID->"0669a17d-52c8-444d-9129-\
367263b6f7bf"]
},
WindowSize->{Automatic, Automatic},
WindowMargins->{{Automatic, Automatic}, {Automatic, Automatic}},
WindowStatusArea->None,
DockedCells->{
  Cell[
   BoxData[
    TagBox[
     GridBox[{{
        ButtonBox[
         TagBox[
          GridBox[{{
             GraphicsBox[
              TagBox[
               RasterBox[CompressedData["
1:eJzVmguUlVUVx4eXTDAoMSKGyEMFEc0oKRCmDBIMTSpEKkFGRh6ZNBCgaJGD
+QDKB1SKBoQouVKyJDGNkcBkWUG+SgXJ1JKsMAvIMJ+7/evsb90z557vfneu
F1zutf4z3+Ocs/c+j/36bq+66aOntKyoqJhVqX9GT5wzdObMiRef0VFvzqyf
dd7U+smTRtbPnjx18sxBda304WBFjaJ1RflJRFopOpZhnPcyVjlk2lek8p2h
+Ktiod13U6xQ/EIxFx0ifToqvmptbqKPPZ+v+Jti7P7WI41Ulh6KIXbdRfFf
cVRruv5ZcsS7oZExhnr9oOetb63dv6o4zNqeCM/9rafxPkXxsmKV3Y/2ZJ6J
jIovKtYo7lAMLDDWR6zNT60P+n7FG2+MtVup+I9ixP7S05PxKZPldruvUbzm
ybinlLWwedrjjfO6t4dus2fbyq1PRI4DFX29+7eM96N21sazhuLO66q3swba
d7jiFhtrkGKc8XjEeMK7pbU9RnFQOXT0+LO/nlHc4z3zzya0U8zW7APefw94
7fDer1U8W07eOtZ644NdaWPPBit+otiqWK3oVS5+Ef49jceTxnOwPW+peMVk
21gmXp2Cue1jz9s0c5wDFMcpRtnen6Q4U/FRxSHNHCuZ8+6BbJ2bM07K2IcH
Yz6t2Kt4U7E4o++hiumKDbYOu8SdwUbDJsVz4s7jHxRLFCcpWhQYc6Hx3mt9
fOpZoo7DFP3tuoXiT5JPbyhqUvofJS52QKZ7FecqjijAr71ihOLb4s7qE4qz
xWxS0Haw8Q7p+WSe9P/xipFF6nq4rcN2RaU9O9fmNKHdyBPp21oxT5xfvlHs
TJv+08TZ7V8r/mh4XHG34grFyYo24vZ9nc3xrxTHRfiMNxkTQrZae9fWZP+3
onsR+i7zxpnhPT9S8Vlx569TpF9Xk+9hxQfE2ZIxige98fDZN0fWJiHWlv1K
rPYexZU2d+dE+HUyWYhzjvSef9kbb3kR+m7z2nNWK8XFdthF9ma/SB984HM2
V8zv8aa7T0mcOKCAvgmxdpx7zhK++F+KSyJ8+5pMd5qMyLrdG2d7EfpuDXi/
5F0Ty3YK2nczXa60+4mS8xEJESMRi4y0uXkmeL8mRe97FAeJs+v494sia/xq
iqxQZhymba5P4Q3dGrRlLR9SLLH7i1P6sS8/JG4eLlJ8y3v3PXFn9q1IP+gx
RWfFh8Xt7VMDGVYWkPf6IvTtIe6sh8Qadg3aXiNu3yLvlBSeLyg6KLbYPT5o
oF0vEmejmLd/FJAbG8dexWa/KJ6f1ev3mWwhoUPPFB05Jy29+0+Jyz0hbPEK
xg36cEaZb87QB6XpvvJphuJ07x5bij063/Tk7PUTZ68L0Q3GlxxqWSALfv77
4s65mOyjvPfYzhbe/ScUmxW9gzmosuv2kTn6seJqcfWMh1JkJM+pEudzfKoV
53Mb7f79kssF0oj9Tq6MnyCuPSqQp739rwp0O9p0O9l7douNyXkf4Ok7S5yd
WBOMjT99xeb1rAIy4oOxZ2F8wFyd5t0j0wMZ+kIPGn982pJAJvYJZ2K25OKO
ExT/tL4rvbaPemOiXx9p6ofXBWNfqlht1w+nyMa+xUbNi7zjHHTz7rsXqS9E
bYBcG5/V1pPpXq/NCnFrstN7tsVr+8tgzL3B/c2Bvuj4OcWxBeSiXoWdejHl
Pf2pW+GrDpHi9V0gbu9hB4d7Mt2UocMmr21DBo8JXlvyftYOHzErpT3zh81u
THkPUZc5VfExRTspXt9tJgex6TxPrvEZ/S7z2lL7DPP3hNjrbby21Mz+Yte3
RtqzXsQHFxQhO/WfswIbUgwdrJijuM2TC7+2OaU9cWKT2qi4M/tk0O4+RZeg
HfswsRu/jYy92OTZXaTs2F3iFHKNJUX2wX9T+90cyEYs9vOgLfFiH69NB+8a
H/ElcfaI+uMECXJxcXHF3XYd5p/YB+rJlxUh88vBPetLTHFO5F1InxSXP24N
ZOtsMo8wHfDxVb6u4vYAc9I/6Jf41HERfdfa9VPSlPAF5DWJjWJuN0bkxX8e
aJgqufoUdrCPIW1vQuQQp0T0TXwj+XMX73l/cfYbnZK55Cxhf4gf1ntjXxrZ
z5vs+jdeO74rYHeoJbJHLxHnn2Ox6WvW9+vi7NVS7x3tyTk4j5eLswchkWN9
njEC2Xzfh/3jjMyQXJ14b0Sex4P7BcGY1Ed32PUqr129PWMedyjGils/fM13
IjJnEfX3rqbbY8E78iLyjh8Gsl2RoQs+YV0G3/HBmOjwhumRfAPg3LKPD5Om
sRR2iDPzuyzlUoi1qBfn2xrExehPmxzUK+cFso3LGA9d0+pBED6qXUVA4uwy
Z6WvtZtrzy/0+hL/s5++21wlA8LX/7+mLq7OTI2L+J/zMyyQi/MUq7VBnLEa
a1cr+fEIOQbxJ/WRg4NxGyRns4gpqu3atzH4X+Ig/MZgGwvf/WlxdvMbiuXi
6uWPmPx+jSwhfCf2c7Xd44vIG4iLD/BkqjZZiWFfCMbAPk4KdCCGvUHc2l0n
zod+wdqvDdr2EvtuJ1bvEBcP+zk7372oX00x3dGPWJBzRx5L7bkqGJf9kJzZ
060vueJsG/N+a/cDZAz6JjWScSb7daYLeUDviiJIXJ6d0IjgHfN9o3d/fmRt
smiB9eX7AXWAu8TlVA2K88TFiNRG3jSwT8ilmuSD4urHCTWJQVL0amvzTZ5P
DoBPIvbwfcGKoA/tyAmPtfssuxcj/ERf6w//tJoOtMja/Uws9/dk8XM5bFGV
6dDPdGLsSq89+8g/v9QJwjhhY2SeqJ2yZ7Cfid9tLt3njZcWl603HnyDwa5U
B3KsD9rfL7laB8S6tA76/ChDriY1FOuDDOz55XZPvFKKzmOtP/YtrFUSc2Gb
8fusyfCIHEulMN0Z6UPMlVaDgk4SZ2vDecJOYUOvtXtsUSymKkTEJ0ntCN2e
sOfojr+nNkmMekHAm31JXDOkwNicmQGhvtYfffZE+mAPa+yavdMh6HeEOH+b
xPz45Q3N1HmhNx61iTq7HmkyXRjwbCe5fcw3xlWRMZn3MTFdvXGoHfKtBxtw
uzj/zth+PntHSj/y/N9LrgZGjYqcspg9zjoc7Y2HzbnKdB0X4bfa6zvHZFxs
Mi8zHQ4tpGvGPMwP5MvbI+Js4lybV+rgve05fnqyOP+OHaSGwHcPcgbiZHKL
GuuP3PhuYgZ8VN8InxMDWeaXqlcwLnPcQ9x+vTrgMadAP2IXbAh2kd9V4Zvx
m3nfN609OfNpNh8v2XyQh0W/A9uc+rTIZETWqlifDD2pn2fVv8mnyRGIJyfE
dBGXU0yzNuQm2Fdyhwfs2RbJxX7kysTaQ0I9xcXL8FhnPGM1T5+wd3nfUQvo
21ryv5uFxLfRj3v37L3qAmOSz7LGrCO5a624eHNQRr9qaVrLI3b+TIZs7I/o
XirAh7g7Zqsh1gTfOyx4js5l+1mmuPMc1i2HG+8wJ0gImU8okR8xI/l7Ele+
bjqNtvfE5WFOU1dGfc8OxsbOd7Z3o0wWXzZkLXofF+CLT+Us5v1eVZrmFNC6
2Bgl8g1rjVsibVqZbJWxMcokB3Up4uVrJT+/3lVGPruCseGFLSZvKtm3NoM/
dQa+R6bVQxLKq4mUwKsygwcykD8eUw7dUmTgzBQTK5GzYrubvcfE+Qby3MuL
4IMseflDOUlc/SwtryCm58wlNV58Lt9+qeF3LTAm548aLDlasoeJVfDROyVO
yDB9X+rqyUcsg8+/y2QiduS7QJLj4GvxVcRkz5p82HHi62n2HhtA3LVBcueD
+iB1GGrpyW+/iPFqjUej8YR36u/X3kkSl9MONN0bxH0DbZScH8OPEufnxVXv
VhIX31OLTPJi4kq+LX5TXB63Qgr8/v3dQOLq7Jxbv8bP9yZ+68/3AfIgcia/
hkstY4qUEPO/UyQuVyfuT76HkteutvOclu9QWyE3SuzcbjvHbztW2tckLo9g
vxIbfE2C3zFl9CUv5BtN8pvApftS1nKRuPpuybZHXP6X+dvWUuh/YTQHOQ==

                "], {{0, 58}, {60, 0}}, {0, 255}, ColorFunction -> RGBColor], 
               
               BoxForm`ImageTag[
               "Byte", ColorSpace -> "RGB", Interleaving -> True], Selectable -> 
               False], BoxID -> 
              "{\"type\":\"Image\",\"message\":\"SizeLimitReached\",\"\
imageData\":{\"imageSource\":\"data:image/png;base64,\
iVBORw0KGgoAAAANSUhEUgAAAB4AAAAdCAYAAAC9pNwMAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAA\
AOxAAADsQBlSsOGwAABL5JREFUSIm1l2mIllUUx393Rs1sUUizKNFSTPODhbbYouRMtmglWGhZQYlt\
QmL0oUUliEpbRLRMKwk0W6XUD1k2ViSCGmkoWplLWDqU0zK5TGYzvz7c8+LTOONMUAdenvvcc885/\
3vP/57zvNAKUTur96vt1DvUfgVdT3Wc2l69Rz2jNT7btBBwDPATMBw4D9gDTAKmAZtjWV9gIlAGDAW\
GqM8AA1NKL7UGRDHgyfE8oD6r3quuU0cfw+bKWDNJnarWxXyn1gYdoFarSV2kblev+RegL1W3qkvi/\
Xu1ovG6po76WuA04GlgQ0ppbMFpW+\
A64AogFXxsBN5OKdWklFYDvdX71OnAmcAYYGUxSCo4HUnOUy3wEVAPTCjlSZ0A9Azd8TFuC+\
wCqoFBwCnA1JTSPvUmYFEAK3Gl91F5j+P5Vj1dnaz2jPkO6jz1GnWG+pu6XH3DI/\
KnulQdor6qnhO23dTH1B7qBvX7pnKzqeCkWm0TeZ6rDla3hP67uDaT432W2hDjWnWUOl/\
tqparO9XDod/eVOCr1Tp1l1oZc+PVa9WvCrubpP6uzlSnqJXqrwX9frVCfSV8XKRuUw+\
pt5TilakD1VXAGqAP8EJKqUptDwyM3PWJ9T8Ah4GTgMsAgduCFyU5AZgOrFIvTimtBeYC/\
YFl6gq1AnV0IF2v7lG3BtLh6sjYXUkeUL+J8V+x+3nmK9dYKtU54WuDWqN+\
FrqJZcBq4CBwPnA68GEgHwDsj90BfAJ0BXrHezlwN/\
B82DeWYcCfMX6HzPjLgTrgfcwkukBdEnk7MVBOU28NhIfUEQWSlOSwuttMqLWNdO+\
oT4av9upz6jIz88vLgO3kGvs4cGfslMifMX4DGAy8BNTEXD1wb8wtABYDTwANoW/\
gSJ3oE2tnAf2AHUReS2xUHRwoH1WHxm57ma/Yk+rNTeSzJFWh36w+pc4OX/\
1DfzCeNWXkzlIfbPwU2BsoPwc6A/\
OBXuQyuiXGM4CFsX5b5A2gArgIWA98XDixfcBScsVrAKakQNQLOBc4BLxFJtBv5GtwF5lAdwMryGXy\
BOBAgJsKjCMTrCGOchDwOvmKfgd8GxusBXallDahlgWx5qjvxlGMC0Bjg1QfNnO0DeZ2OL4w94t6uf\
pi+BgR85+qsyNWOaEs1l3V683lMpnrc4W6ppngX5tL4wvqXvUq9TWjD8d7UaooidoxAqyL50J1ceja\
mT8GbjYXkB+bCP5IrBsctt3C9mX1A3Oj+DzAdaZA9xKAMqAT+cIPBQaklNaH7kbganIhqQa6RL5/\
AtqFbjcwM6VUp/YNMn5BLia1KaX6UqxiP+\
4A7AROLWAZTr6bD6aUVqptgEuAiwNgAv4gfwisTCn9rl4YZHyIfzb/\
GqBHSukAjSWIUm0mTZV6Soz3qd2PMjjavqu5Xzeop5krVb25To9qyTipbeM3JICoPtyKwLfH2p/\
NTeI4o6+3ZFtycEYwtCjL1FOPYdMxyFSUX5s7qWaRxNFMAk4mf2d9SSbQWeSKNZ9cMG4jV6y9wHLgb\
DI36oA5KaWFrdptSxK5e9PcY1er76k9/hPnzQTsry5Qd5g/ebqrXcx/bTaai9Cg/\
yNwpXqD2q4JXbk6TB3fWn9/A9izhAbbZ9AzAAAAAElFTkSuQmCC\",\"boundingBox\":{\"\
width\":30,\"height\":29,\"baseline\":19}},\"plotRange\":[0,1,0,1]}", 
              DefaultBaseStyle -> "ImageGraphics", ImageSize -> 
              Magnification[0.5], ImageSizeRaw -> {60, 58}, 
              PlotRange -> {{0, 60}, {0, 58}}], 
             StyleBox[
             "\"WOLFRAM CHALLENGES\"", ShowStringCharacters -> False, 
              FontFamily -> "Source Sans Pro", FontSize -> 16, FontWeight -> 
              "Normal", FontColor -> GrayLevel[1]]}}, AutoDelete -> False, 
           GridBoxAlignment -> {
            "Columns" -> {Left, Left}, "Rows" -> {Center, Center}}, 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Grid"], 
         Appearance -> None, ButtonFunction :> 
         SystemOpen["http://challenges.wolfram.com/"], Evaluator -> Automatic,
          Method -> "Preemptive"]}}, AutoDelete -> False, 
      GridBoxDividers -> {"Columns" -> {{None}}, "Rows" -> {{None}}}, 
      GridBoxItemSize -> {
       "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Grid"]], 
   "Text", ShowCellBracket -> False, CellMargins -> 0, GeneratedCell -> True, 
   CellAutoOverwrite -> True, CellFrameMargins -> {{60, 0}, {4, 6}}, 
   CellFrameColor -> RGBColor[0.9961, 0.3098, 0.21569], 
   ShowStringCharacters -> False, Background -> 
   RGBColor[0.9961, 0.3098, 0.21569]], 
  Cell["", "Text", CellMargins -> 0, ShowCellBracket -> False, 
   CellElementSpacings -> {"CellMinHeight" -> 5}, CellFrameMargins -> 3, 
   FontSize -> 1, CellFrame -> 0, Background -> 
   RGBColor[0.9686274509803922, 0.9137254901960784, 0.403921568627451]]},
TaggingRules->{
 "WolframChallengesInternal" -> 
  Association[
   "PacletVersion" -> "2.17.205", "FrameworkVersion" -> "public-2.17.205", 
    "PacletBuildDate" -> 
    DateObject[{2018, 4, 12, 2, 0, 29.8383958`9.227350380539981}, "Instant", 
      "Gregorian", 0.], "NotebookBuildDate" -> 
    DateObject[{2018, 4, 12, 16, 5, 51.915294`8.467870293046845}, "Instant", 
      "Gregorian", 0.], "Hash" -> "41eeded0e97e539f", "Key" -> 
    "public/pub/p-41eeded0e97e539f", "CheckerAPI" -> 
    CloudObject[
     "https://www.wolframcloud.com/objects/wolframchallenges/public/api/\
check"], "SearchNames" -> {"AntipodeAboveSeaLevelQ"}, "Status" -> "Published",
     "Source" -> 
    CloudObject[
     "https://www.wolframcloud.com/objects/wolframchallenges/public/pub/p-\
41eeded0e97e539f"], "ReviewNotebook" -> False]},
ShowAutoSpellCheck->False,
FrontEndVersion->"11.3 for Mac OS X x86 (32-bit, 64-bit Kernel) (March 5, \
2018)",
StyleDefinitions->Notebook[{
   Cell[
    StyleData[StyleDefinitions -> "Default.nb"]], 
   Cell[
    StyleData["Title"], ShowCellBracket -> False, ShowGroupOpener -> False, 
    CellMargins -> {{65.14453125, 30}, {0., 30.}}, 
    CellFrameMargins -> {{66, Inherited}, {Inherited, 20}}, FontFamily -> 
    "Source Sans Pro Light", FontSize -> 50, FontColor -> 
    RGBColor[0.1843137254901961, 0.6509803921568628, 0.6941176470588235]], 
   Cell[
    StyleData["Section"], CellFrame -> {{0, 0}, {0, 1}}, ShowCellBracket -> 
    False, ShowGroupOpener -> False, 
    CellMargins -> {{66, 30}, {Inherited, 35}}, Deployed -> True, 
    CellFrameMargins -> {{0, Inherited}, {Inherited, 10}}, CellFrameColor -> 
    GrayLevel[0.7137], FontFamily -> "Source Sans Pro", FontSize -> 17, 
    FontWeight -> "DemiBold", FontColor -> Hue[0.51, 0.817, 0.72]], 
   Cell[
    StyleData["SectionNoLine", StyleDefinitions -> StyleData["Section"]], 
    CellFrame -> {{0, 0}, {0, 0}}, CellMargins -> {{49, 30}, {4, 0}}], 
   Cell[
    StyleData["SectionOnlyLine", StyleDefinitions -> StyleData["Section"]], 
    CellMargins -> {{66, 30}, {4, 35}}, 
    CellElementSpacings -> {"CellMinHeight" -> 1}, CellFrameMargins -> 0, 
    FontSize -> 0.1], 
   Cell[
    StyleData["Subsection", StyleDefinitions -> StyleData["Section"]], 
    ShowCellBracket -> True, ShowGroupOpener -> True, WholeCellGroupOpener -> 
    True], 
   Cell[
    StyleData["Text"], ShowCellBracket -> True, 
    CellMargins -> {{66, 30}, {Inherited, Inherited}}, FontFamily -> 
    "Source Sans Pro", FontSize -> 16, FontWeight -> "Regular", FontSlant -> 
    "Plain", PrivateFontOptions -> {"FontPostScriptName" -> "Automatic"}, 
    FontColor -> 
    RGBColor[0.3254901960784314, 0.3254901960784314, 0.3254901960784314]], 
   Cell[
    StyleData["Item"], CellDingbat -> 
    StyleBox["\[FilledSmallSquare]", Alignment -> Baseline, 
      RGBColor[0.21176470588235294`, 0.6941176470588235, 0.7490196078431373]],
     CellMargins -> {{81, 30}, {Inherited, Inherited}}, FontFamily -> 
    "Source Sans Pro", FontSize -> 16, FontWeight -> "Regular", FontSlant -> 
    "Plain", PrivateFontOptions -> {"FontPostScriptName" -> "Automatic"}, 
    FontColor -> 
    RGBColor[0.3254901960784314, 0.3254901960784314, 0.3254901960784314]], 
   Cell[
    StyleData["Description"], ShowCellBracket -> False, 
    CellMargins -> {{71, 30}, {0, 10}}, 
    AutoStyleOptions -> {
     "LocalVariableStyle" -> {FontColor -> RGBColor[0.263, 0.537, 0.345]}}, 
    LineSpacing -> {1.2, 0}, FontFamily -> "Source Sans Pro", FontSize -> 20, 
    FontSlant -> "Plain", 
    PrivateFontOptions -> {"FontPostScriptName" -> "Automatic"}, FontColor -> 
    GrayLevel[0.3]], 
   Cell[
    StyleData["WCIntroDivider"], Editable -> False, Selectable -> False, 
    Deletable -> False, ShowCellBracket -> False, 
    CellMargins -> {{66, 30}, {-2, 35}}, ShowStringCharacters -> False], 
   Cell[
    StyleData["WCIntroDividerLine", StyleDefinitions -> StyleData["Text"]], 
    Editable -> False, Selectable -> False, Deletable -> False, 
    CellFrame -> {{0, 0}, {0, 8}}, ShowCellBracket -> False, 
    CellMargins -> {{66, 30}, {15, 0}}, 
    CellElementSpacings -> {"CellMinHeight" -> 1}, 
    CellFrameMargins -> {{0, 0}, {-1, 0}}, CellFrameColor -> 
    RGBColor[0.9961, 0.3098, 0.21569], FontSize -> 1], 
   Cell[
    StyleData["SubmitRow"], Editable -> False, Selectable -> False, Deletable -> 
    False, CellFrame -> {{0, 0}, {0, 2}}, ShowCellBracket -> False, 
    CellMargins -> {{66, 30}, {15, 30}}, 
    CellGroupingRules -> {"SectionGrouping", -5}, 
    CellFrameMargins -> {{Inherited, Inherited}, {20, 20}}, CellFrameColor -> 
    RGBColor[0.996078431372549, 0.3058823529411765, 0.21568627450980393`]], 
   Cell[
    StyleData["StandardForm"], FontSize -> 16], 
   Cell[
    StyleData["CodeFont"], FontSize -> 
    FEPrivate`If[False, 0.907029 Inherited, Inherited]], 
   Cell[
    StyleData["RefLink"], TemplateBoxOptions -> {DisplayFunction :> (TagBox[
        ButtonBox[#, ButtonData -> #2, BaseStyle -> Dynamic[
           If[
            CurrentValue["MouseOver"], {
            "Link", FontColor -> RGBColor[0.854902, 0.396078, 0.145098]}, {
            "Link"}]]], 
        MouseAppearanceTag["LinkHand"]]& )}, 
    ButtonBoxOptions -> {BaseStyle -> "Link"}], 
   Cell[
    StyleData["InlineCode", StyleDefinitions -> StyleData["StandardForm"]]], 
   Cell[
    StyleData["SmallText", StyleDefinitions -> StyleData["Text"]], FontSize -> 
    0.975 Inherited, FontColor -> GrayLevel[0.25]], 
   Cell[
    StyleData["Hyperlink"], FontColor -> 
    RGBColor[0.21176470588235294`, 0.7058823529411765, 0.7490196078431373]], 
   Cell[
    StyleData["HyperlinkActive"], FontColor -> 
    RGBColor[0.996078431372549, 0.3058823529411765, 0.21568627450980393`]], 
   Cell[
    StyleData["SubmitButton"], ShowCellBracket -> False, 
    CellMargins -> {{66, Inherited}, {25, Inherited}}, ShowCellLabel -> False,
     TextAlignment -> Center, ShowStringCharacters -> False], 
   Cell[
    StyleData["SigninText", StyleDefinitions -> StyleData["Text"]], 
    ShowStringCharacters -> False, FontSize -> 12, FontColor -> 
    GrayLevel[0.25]], 
   Cell[
    StyleData["ButtonLabel", StyleDefinitions -> StyleData["Text"]], 
    TextAlignment -> Center, ShowStringCharacters -> False, FontFamily -> 
    "Source Sans Pro", FontSize -> 18, FontWeight -> "DemiBold", FontColor -> 
    GrayLevel[1]], 
   Cell[
    StyleData[
    "ButtonLabelActive", StyleDefinitions -> StyleData["ButtonLabel"]], 
    TextAlignment -> Center, ShowStringCharacters -> False, FontColor -> 
    RGBColor[0.996078431372549, 0.3058823529411765, 0.21568627450980393`]], 
   Cell[
    StyleData["Notebook"], ShowAutoSpellCheck -> False]}, Visible -> False, 
  FrontEndVersion -> 
  "11.3 for Mac OS X x86 (32-bit, 64-bit Kernel) (March 5, 2018)", 
  StyleDefinitions -> "PrivateStylesheetFormatting.nb"]
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{
 "NoLabel"->{
  Cell[63001, 1234, 18437, 436, 82, "WolframAlphaShortInput",ExpressionUUID->"1f979158-10b6-4930-b46b-c7c9603392b6",
   CellTags->"NoLabel"],
  Cell[81463, 1674, 239, 4, 30, InheritFromParent,ExpressionUUID->"200456f7-15d1-4eda-831c-3fb76b6df755",
   CellTags->"NoLabel"],
  Cell[81705, 1680, 489, 13, 41, "Output",ExpressionUUID->"2b1228c7-0609-4b5b-98cd-49c0c0e26b1a",
   CellTags->"NoLabel"],
  Cell[83611, 1740, 1696, 39, 139, "Input",ExpressionUUID->"03bebf05-a6f1-4f8d-9110-60183e494084",
   CellTags->"NoLabel"]}
 }
*)
(*CellTagsIndex
CellTagsIndex->{
 {"NoLabel", 110325, 2282}
 }
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[580, 22, 50, 0, 94, "Title",ExpressionUUID->"443ca72d-da4a-41c5-a3ec-c491d30b2190"],
Cell[633, 24, 633, 20, 68, "WCIntroDivider",ExpressionUUID->"29fa182e-5608-482c-9837-8e520d77b811"],
Cell[1269, 46, 30, 0, 25, "WCIntroDividerLine",ExpressionUUID->"dff597d7-aa07-4c03-be86-aabf06a13f61"],
Cell[1302, 48, 96, 2, 36, "Description",ExpressionUUID->"b72ab914-f2bd-43d1-962c-c22c00880a0d"],
Cell[CellGroupData[{
Cell[1423, 54, 47, 0, 72, "Section",ExpressionUUID->"243029b8-f7e8-4080-8f65-bc23cff449d0"],
Cell[1473, 56, 334, 8, 80, "Text",ExpressionUUID->"73287d74-577e-4d00-80e1-067c442d5fa9"],
Cell[CellGroupData[{
Cell[1832, 68, 361, 13, 32, "Input",ExpressionUUID->"e17093d1-2837-4000-a299-113932ae7b74",
 Evaluatable->False],
Cell[2196, 83, 99, 3, 36, "Output",ExpressionUUID->"ac2939b3-d30d-4202-9801-2d9ca5b4a937"]
}, Open  ]],
Cell[CellGroupData[{
Cell[2332, 91, 618, 17, 40, "Input",ExpressionUUID->"1903ec9c-d9ef-4180-8268-19e7b6780848",
 Evaluatable->False],
Cell[2953, 110, 99, 3, 36, "Output",ExpressionUUID->"849aa859-0339-4ef3-a3af-b734d3b004e9"]
}, Open  ]],
Cell[CellGroupData[{
Cell[3089, 118, 390, 12, 32, "Input",ExpressionUUID->"7cb7a4ce-067c-4aa5-8644-2f9cd22ed084",
 Evaluatable->False],
Cell[3482, 132, 98, 3, 36, "Output",ExpressionUUID->"bd824c73-355d-4cb7-8896-b4808ec7944f"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[3629, 141, 35, 0, 72, "Subsection",ExpressionUUID->"0dd9c852-d146-4314-92d2-d516d6762c32"],
Cell[CellGroupData[{
Cell[3689, 145, 559, 17, 70, "Input",ExpressionUUID->"7fe57d7c-8780-447f-93f5-574f1a9127c6",
 Evaluatable->False],
Cell[4251, 164, 98, 3, 70, "Output",ExpressionUUID->"7553027f-30bc-4ea8-a3c1-250e6cc33016"]
}, Open  ]],
Cell[4364, 170, 50, 0, 70, "Text",ExpressionUUID->"9bcca081-c234-41c0-a1e6-90efa89e58f5"],
Cell[4417, 172, 43427, 738, 70, "Output",ExpressionUUID->"479128cc-745d-4829-b5ed-42fc83d4de16"]
}, Closed]]
}, Open  ]],
Cell[CellGroupData[{
Cell[47893, 916, 623, 20, 63, "WCIntroDivider",ExpressionUUID->"1ff67e5e-7b9d-48b5-9abd-9a9318082d2d",
 CellGroupingRules->{"SectionGrouping", 0}],
Cell[48519, 938, 73, 1, 44, "WCIntroDividerLine",ExpressionUUID->"94225844-f92f-4c4b-8ea3-986c76aa8611"],
Cell[CellGroupData[{
Cell[48617, 943, 905, 19, 70, "Input",ExpressionUUID->"c2aa6a79-c9e9-400f-ae35-6db5938e3842"],
Cell[49525, 964, 12632, 243, 82, "Output",ExpressionUUID->"ccbb4f80-00cb-459b-a6d8-d725fde84c0d"],
Cell[62160, 1209, 317, 5, 38, "Output",ExpressionUUID->"94b2d19f-2315-40ae-948d-92b1b099703e"]
}, Open  ]],
Cell[CellGroupData[{
Cell[62514, 1219, 234, 5, 34, "Input",ExpressionUUID->"76a18255-8125-45f2-abe1-147544831fc0"],
Cell[62751, 1226, 235, 5, 38, "Output",ExpressionUUID->"e15d73b0-df96-4f2a-acb1-5adce27c6142"]
}, Open  ]],
Cell[63001, 1234, 18437, 436, 82, "WolframAlphaShortInput",ExpressionUUID->"1f979158-10b6-4930-b46b-c7c9603392b6",
 CellTags->"NoLabel"],
Cell[CellGroupData[{
Cell[81463, 1674, 239, 4, 30, InheritFromParent,ExpressionUUID->"200456f7-15d1-4eda-831c-3fb76b6df755",
 CellTags->"NoLabel"],
Cell[81705, 1680, 489, 13, 41, "Output",ExpressionUUID->"2b1228c7-0609-4b5b-98cd-49c0c0e26b1a",
 CellTags->"NoLabel"]
}, Open  ]],
Cell[CellGroupData[{
Cell[82231, 1698, 434, 10, 61, "Input",ExpressionUUID->"201882fb-d940-4427-ba33-e2a66f04a731"],
Cell[82668, 1710, 278, 4, 38, "Output",ExpressionUUID->"445f59e3-6e5f-48ad-8d63-5b917e6f8ddd"]
}, Open  ]],
Cell[82961, 1717, 605, 19, 66, "WCIntroDivider",ExpressionUUID->"27cc70d9-6efd-4c56-bbeb-41bda97faa4f"],
Cell[83569, 1738, 39, 0, 44, "WCIntroDividerLine",ExpressionUUID->"ec0aac26-6d01-4430-b1b0-89eeaebd7565"],
Cell[83611, 1740, 1696, 39, 139, "Input",ExpressionUUID->"03bebf05-a6f1-4f8d-9110-60183e494084",
 CellTags->"NoLabel"]
}, Open  ]],
Cell[85322, 1782, 9820, 209, 101, "SubmitRow",ExpressionUUID->"0669a17d-52c8-444d-9129-367263b6f7bf"]
}
]
*)

